// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: confidence/flags/admin/v1/types.proto

package v1

import (
	v1 "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/flags/types/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum specifying how much of a segments information should be returned.
type SegmentView int32

const (
	// The default / unset value.
	// The API will default to the BASIC view.
	SegmentView_SEGMENT_VIEW_UNSPECIFIED SegmentView = 0
	// Include basic information about the segment, excluding the bitset allocation.
	// This is the default value (for both ListSegments and GetSegment).
	SegmentView_BASIC SegmentView = 1
	// Include everything.
	SegmentView_FULL SegmentView = 2
)

// Enum value maps for SegmentView.
var (
	SegmentView_name = map[int32]string{
		0: "SEGMENT_VIEW_UNSPECIFIED",
		1: "BASIC",
		2: "FULL",
	}
	SegmentView_value = map[string]int32{
		"SEGMENT_VIEW_UNSPECIFIED": 0,
		"BASIC":                    1,
		"FULL":                     2,
	}
)

func (x SegmentView) Enum() *SegmentView {
	p := new(SegmentView)
	*p = x
	return p
}

func (x SegmentView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentView) Descriptor() protoreflect.EnumDescriptor {
	return file_confidence_flags_admin_v1_types_proto_enumTypes[0].Descriptor()
}

func (SegmentView) Type() protoreflect.EnumType {
	return &file_confidence_flags_admin_v1_types_proto_enumTypes[0]
}

func (x SegmentView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentView.Descriptor instead.
func (SegmentView) EnumDescriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{0}
}

// The state of a segment.
type Segment_State int32

const (
	// Unspecified state.
	Segment_STATE_UNSPECIFIED Segment_State = 0
	// Segment is ready for use (no allocation is needed).
	Segment_OK Segment_State = 4
	// Segment has is configured for exclusivity, but has not been allocated.
	Segment_UNALLOCATED Segment_State = 1
	// Segment has been allocated with an exclusive allocation.
	Segment_ALLOCATED Segment_State = 2
	// Segment is no longer used.
	Segment_ARCHIVED Segment_State = 3
)

// Enum value maps for Segment_State.
var (
	Segment_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		4: "OK",
		1: "UNALLOCATED",
		2: "ALLOCATED",
		3: "ARCHIVED",
	}
	Segment_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"OK":                4,
		"UNALLOCATED":       1,
		"ALLOCATED":         2,
		"ARCHIVED":          3,
	}
)

func (x Segment_State) Enum() *Segment_State {
	p := new(Segment_State)
	*p = x
	return p
}

func (x Segment_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Segment_State) Descriptor() protoreflect.EnumDescriptor {
	return file_confidence_flags_admin_v1_types_proto_enumTypes[1].Descriptor()
}

func (Segment_State) Type() protoreflect.EnumType {
	return &file_confidence_flags_admin_v1_types_proto_enumTypes[1]
}

func (x Segment_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Segment_State.Descriptor instead.
func (Segment_State) EnumDescriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{0, 0}
}

// State of the flag.
type Flag_State int32

const (
	// Unspecified state.
	Flag_STATE_UNSPECIFIED Flag_State = 0
	// The flag is active and can be resolved.
	Flag_ACTIVE Flag_State = 1
	// The flag is no longer active.
	Flag_ARCHIVED Flag_State = 2
)

// Enum value maps for Flag_State.
var (
	Flag_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "ARCHIVED",
	}
	Flag_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"ARCHIVED":          2,
	}
)

func (x Flag_State) Enum() *Flag_State {
	p := new(Flag_State)
	*p = x
	return p
}

func (x Flag_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flag_State) Descriptor() protoreflect.EnumDescriptor {
	return file_confidence_flags_admin_v1_types_proto_enumTypes[2].Descriptor()
}

func (Flag_State) Type() protoreflect.EnumType {
	return &file_confidence_flags_admin_v1_types_proto_enumTypes[2]
}

func (x Flag_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flag_State.Descriptor instead.
func (Flag_State) EnumDescriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 0}
}

// The type of a field in the schema.
type EvaluationContextSchemaField_Kind int32

const (
	// Unspecified kind.
	EvaluationContextSchemaField_KIND_UNSPECIFIED EvaluationContextSchemaField_Kind = 0
	// Null value observed.
	EvaluationContextSchemaField_NULL_KIND EvaluationContextSchemaField_Kind = 1
	// A number, integer or double, observed.
	EvaluationContextSchemaField_NUMBER_KIND EvaluationContextSchemaField_Kind = 2
	// A string observed.
	EvaluationContextSchemaField_STRING_KIND EvaluationContextSchemaField_Kind = 3
	// A boolean observed.
	EvaluationContextSchemaField_BOOL_KIND EvaluationContextSchemaField_Kind = 4
)

// Enum value maps for EvaluationContextSchemaField_Kind.
var (
	EvaluationContextSchemaField_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "NULL_KIND",
		2: "NUMBER_KIND",
		3: "STRING_KIND",
		4: "BOOL_KIND",
	}
	EvaluationContextSchemaField_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"NULL_KIND":        1,
		"NUMBER_KIND":      2,
		"STRING_KIND":      3,
		"BOOL_KIND":        4,
	}
)

func (x EvaluationContextSchemaField_Kind) Enum() *EvaluationContextSchemaField_Kind {
	p := new(EvaluationContextSchemaField_Kind)
	*p = x
	return p
}

func (x EvaluationContextSchemaField_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluationContextSchemaField_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_confidence_flags_admin_v1_types_proto_enumTypes[3].Descriptor()
}

func (EvaluationContextSchemaField_Kind) Type() protoreflect.EnumType {
	return &file_confidence_flags_admin_v1_types_proto_enumTypes[3]
}

func (x EvaluationContextSchemaField_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluationContextSchemaField_Kind.Descriptor instead.
func (EvaluationContextSchemaField_Kind) EnumDescriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{7, 0}
}

// Enum of different formats that country should be in.
type ContextFieldSemanticType_CountrySemanticType_CountryFormat int32

const (
	// No semantic type for the field.
	ContextFieldSemanticType_CountrySemanticType_COUNTRY_FORMAT_UNSPECIFIED ContextFieldSemanticType_CountrySemanticType_CountryFormat = 0
	// The field is a country specified by a 2 letter code.
	ContextFieldSemanticType_CountrySemanticType_TWO_LETTER_ISO_CODE ContextFieldSemanticType_CountrySemanticType_CountryFormat = 1
)

// Enum value maps for ContextFieldSemanticType_CountrySemanticType_CountryFormat.
var (
	ContextFieldSemanticType_CountrySemanticType_CountryFormat_name = map[int32]string{
		0: "COUNTRY_FORMAT_UNSPECIFIED",
		1: "TWO_LETTER_ISO_CODE",
	}
	ContextFieldSemanticType_CountrySemanticType_CountryFormat_value = map[string]int32{
		"COUNTRY_FORMAT_UNSPECIFIED": 0,
		"TWO_LETTER_ISO_CODE":        1,
	}
)

func (x ContextFieldSemanticType_CountrySemanticType_CountryFormat) Enum() *ContextFieldSemanticType_CountrySemanticType_CountryFormat {
	p := new(ContextFieldSemanticType_CountrySemanticType_CountryFormat)
	*p = x
	return p
}

func (x ContextFieldSemanticType_CountrySemanticType_CountryFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextFieldSemanticType_CountrySemanticType_CountryFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_confidence_flags_admin_v1_types_proto_enumTypes[4].Descriptor()
}

func (ContextFieldSemanticType_CountrySemanticType_CountryFormat) Type() protoreflect.EnumType {
	return &file_confidence_flags_admin_v1_types_proto_enumTypes[4]
}

func (x ContextFieldSemanticType_CountrySemanticType_CountryFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContextFieldSemanticType_CountrySemanticType_CountryFormat.Descriptor instead.
func (ContextFieldSemanticType_CountrySemanticType_CountryFormat) EnumDescriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 3, 0}
}

// A reusable slice of an entity population.
type Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the segment.
	// For example:
	// `segments/0smva5nxuhv4yts6paxt`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A human-friendly name for the segment.
	DisplayName string `protobuf:"bytes,12,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The targeting that this segment adheres to.
	Targeting *v1.Targeting `protobuf:"bytes,2,opt,name=targeting,proto3" json:"targeting,omitempty"`
	// How much of the total population that is allocated to this segment,
	// and the coordination with other segments.
	Allocation *Segment_Allocation `protobuf:"bytes,3,opt,name=allocation,proto3" json:"allocation,omitempty"`
	// Current state of the segment.
	State Segment_State `protobuf:"varint,5,opt,name=state,proto3,enum=confidence.flags.admin.v1.Segment_State" json:"state,omitempty"`
	// A bitset representing the buckets that are allocated for this segment.
	BitsetAllocation *Segment_BitsetAllocation `protobuf:"bytes,6,opt,name=bitset_allocation,json=bitsetAllocation,proto3" json:"bitset_allocation,omitempty"`
	// General labels for this resource.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The workflow instance that created this segment. If set, permissions
	// will be inherited from the workflow instance, in addition to the segment permissions.
	WorkflowInstance string `protobuf:"bytes,16,opt,name=workflow_instance,json=workflowInstance,proto3" json:"workflow_instance,omitempty"`
	// The flag owning the rule this segment is connected to. If set, permissions
	// will be inherited from the flag, in addition to the segment permissions.
	Flag string `protobuf:"bytes,17,opt,name=flag,proto3" json:"flag,omitempty"`
	// Time when the segment was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the segment was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this segment.
	Creator string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this segment.
	Updater string `protobuf:"bytes,14,opt,name=updater,proto3" json:"updater,omitempty"`
	// The owner of the resource. If not set will default to the creator.
	Owner         string `protobuf:"bytes,15,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Segment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Segment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Segment) GetTargeting() *v1.Targeting {
	if x != nil {
		return x.Targeting
	}
	return nil
}

func (x *Segment) GetAllocation() *Segment_Allocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *Segment) GetState() Segment_State {
	if x != nil {
		return x.State
	}
	return Segment_STATE_UNSPECIFIED
}

func (x *Segment) GetBitsetAllocation() *Segment_BitsetAllocation {
	if x != nil {
		return x.BitsetAllocation
	}
	return nil
}

func (x *Segment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Segment) GetWorkflowInstance() string {
	if x != nil {
		return x.WorkflowInstance
	}
	return ""
}

func (x *Segment) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *Segment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Segment) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Segment) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Segment) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Segment) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// A slice of the entity population that has is materialized as individual entity identifiers stored in a database.
// Useful for segmenting a large list of entities that cannot otherwise be easily targeted through evaluation context.
type MaterializedSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the materialized segment.
	// For example:
	// `materializedSegment/0smva5nxuhv4yts6paxt`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A human-friendly name for the segment.
	DisplayName string `protobuf:"bytes,12,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// General labels for this resource.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Time when the segment was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the segment was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this segment.
	Creator string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this segment.
	Updater string `protobuf:"bytes,14,opt,name=updater,proto3" json:"updater,omitempty"`
	// The owner of the resource. If not set will default to the creator.
	Owner         string `protobuf:"bytes,15,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaterializedSegment) Reset() {
	*x = MaterializedSegment{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializedSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedSegment) ProtoMessage() {}

func (x *MaterializedSegment) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedSegment.ProtoReflect.Descriptor instead.
func (*MaterializedSegment) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *MaterializedSegment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MaterializedSegment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MaterializedSegment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MaterializedSegment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *MaterializedSegment) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *MaterializedSegment) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *MaterializedSegment) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *MaterializedSegment) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// A flag controlling how entities are assigned variants.
type Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the flag.
	// For example:
	// `flags/my-flag`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description for the flag.
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Schema for the value of each variant.
	Schema *v1.FlagSchema_StructFlagSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// List of variants for this flag. When a client resolves this flag, it will
	// be assigned exactly one of the variants in this list along with its value.
	// (-- api-linter: core::0122::embedded-resource=disabled
	//
	//	aip.dev/not-precedent: these are embedded for historical reasons. --)
	Variants []*Flag_Variant `protobuf:"bytes,3,rep,name=variants,proto3" json:"variants,omitempty"`
	// The current state of the flag.
	State Flag_State `protobuf:"varint,4,opt,name=state,proto3,enum=confidence.flags.admin.v1.Flag_State" json:"state,omitempty"`
	// List of ordered rules that determines how entities are assigned to
	// variants. When a client resolves this flag, each rule will be tried in
	// order, the first rule that match, will provide a variant assignment. If
	// not rule matches, no variant will be assigned.
	// (-- api-linter: core::0122::embedded-resource=disabled
	//
	//	aip.dev/not-precedent: these are embedded for historical reasons. --)
	Rules []*Flag_Rule `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
	// List of clients that this flag is enabled for.
	Clients []string `protobuf:"bytes,12,rep,name=clients,proto3" json:"clients,omitempty"`
	// Time when the flag was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the flag was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this flag.
	Creator string `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this flag.
	Updater string `protobuf:"bytes,15,opt,name=updater,proto3" json:"updater,omitempty"`
	// General labels for this flag.
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Semi-realtime usage statistics for the flag.
	UsageMetadata *Flag_UsageMetadata `protobuf:"bytes,11,opt,name=usage_metadata,json=usageMetadata,proto3" json:"usage_metadata,omitempty"`
	// The owner of the resource. If not set will default to the creator.
	Owner         string `protobuf:"bytes,16,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag) Reset() {
	*x = Flag{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Flag) GetSchema() *v1.FlagSchema_StructFlagSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Flag) GetVariants() []*Flag_Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *Flag) GetState() Flag_State {
	if x != nil {
		return x.State
	}
	return Flag_STATE_UNSPECIFIED
}

func (x *Flag) GetRules() []*Flag_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Flag) GetClients() []string {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *Flag) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Flag) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Flag) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Flag) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Flag) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Flag) GetUsageMetadata() *Flag_UsageMetadata {
	if x != nil {
		return x.UsageMetadata
	}
	return nil
}

func (x *Flag) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// Configuration for setting up edge resolvers on Fastly for this account.
type FastlyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the Fastly config.
	// For example:
	// `fastlyConfig/0smva5nxuhv4yts6paxt`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A human-friendly name for the Fastly config.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The Fastly Service ID that should be deployed to.
	ServiceId string `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Determines if the Fastly config is enabled or not.
	Enabled bool `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Time of last deployment to Fastly.
	LastDeployTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_deploy_time,json=lastDeployTime,proto3" json:"last_deploy_time,omitempty"`
	// General labels for this resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Time when the Fastly config was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the Fastly config was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this Fastly config.
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this Fastly config.
	Updater       string `protobuf:"bytes,8,opt,name=updater,proto3" json:"updater,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FastlyConfig) Reset() {
	*x = FastlyConfig{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastlyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastlyConfig) ProtoMessage() {}

func (x *FastlyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastlyConfig.ProtoReflect.Descriptor instead.
func (*FastlyConfig) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *FastlyConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FastlyConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *FastlyConfig) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *FastlyConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FastlyConfig) GetLastDeployTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeployTime
	}
	return nil
}

func (x *FastlyConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FastlyConfig) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *FastlyConfig) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *FastlyConfig) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *FastlyConfig) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

// Represents an evaluation context field that has been manually added
type EvaluationContextFieldOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the field.
	// For example:
	// `evaluationContextField/country`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The path to the field. i.e: `country` or `foo.bar`
	Field string `protobuf:"bytes,8,opt,name=field,proto3" json:"field,omitempty"`
	// The clients this field should be available for. Empty list means all.
	Clients []string `protobuf:"bytes,9,rep,name=clients,proto3" json:"clients,omitempty"`
	// The value type of this field
	Kind EvaluationContextSchemaField_Kind `protobuf:"varint,10,opt,name=kind,proto3,enum=confidence.flags.admin.v1.EvaluationContextSchemaField_Kind" json:"kind,omitempty"`
	// Semantic type of a field. Makes it possible to narrow the number of possible values for a field etc.
	SemanticType *ContextFieldSemanticType `protobuf:"bytes,11,opt,name=semantic_type,json=semanticType,proto3" json:"semantic_type,omitempty"`
	// Human friendly name of the field
	DisplayName string `protobuf:"bytes,12,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// If this field should be hidden.
	Hidden bool `protobuf:"varint,13,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// General labels for this resource.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Time when the field was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the field was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this field.
	Creator string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this field.
	Updater       string `protobuf:"bytes,6,opt,name=updater,proto3" json:"updater,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluationContextFieldOverride) Reset() {
	*x = EvaluationContextFieldOverride{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationContextFieldOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationContextFieldOverride) ProtoMessage() {}

func (x *EvaluationContextFieldOverride) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationContextFieldOverride.ProtoReflect.Descriptor instead.
func (*EvaluationContextFieldOverride) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *EvaluationContextFieldOverride) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EvaluationContextFieldOverride) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *EvaluationContextFieldOverride) GetClients() []string {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *EvaluationContextFieldOverride) GetKind() EvaluationContextSchemaField_Kind {
	if x != nil {
		return x.Kind
	}
	return EvaluationContextSchemaField_KIND_UNSPECIFIED
}

func (x *EvaluationContextFieldOverride) GetSemanticType() *ContextFieldSemanticType {
	if x != nil {
		return x.SemanticType
	}
	return nil
}

func (x *EvaluationContextFieldOverride) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EvaluationContextFieldOverride) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *EvaluationContextFieldOverride) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EvaluationContextFieldOverride) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EvaluationContextFieldOverride) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *EvaluationContextFieldOverride) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *EvaluationContextFieldOverride) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

// Information about how a client resolved
type ClientResolveInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource reference to a client.
	Client string `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	// Resource reference to a credential.
	ClientCredential string `protobuf:"bytes,2,opt,name=client_credential,json=clientCredential,proto3" json:"client_credential,omitempty"`
	// The different evaluation context schema of the client that have been seen recently.
	Schema        []*ClientResolveInfo_EvaluationContextSchemaInstance `protobuf:"bytes,3,rep,name=schema,proto3" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientResolveInfo) Reset() {
	*x = ClientResolveInfo{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientResolveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResolveInfo) ProtoMessage() {}

func (x *ClientResolveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResolveInfo.ProtoReflect.Descriptor instead.
func (*ClientResolveInfo) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *ClientResolveInfo) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *ClientResolveInfo) GetClientCredential() string {
	if x != nil {
		return x.ClientCredential
	}
	return ""
}

func (x *ClientResolveInfo) GetSchema() []*ClientResolveInfo_EvaluationContextSchemaInstance {
	if x != nil {
		return x.Schema
	}
	return nil
}

type FlagResolveInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The flag the info is about
	Flag string `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag,omitempty"`
	// Information about how variants were resolved.
	VariantResolveInfo []*FlagResolveInfo_VariantResolveInfo `protobuf:"bytes,2,rep,name=variant_resolve_info,json=variantResolveInfo,proto3" json:"variant_resolve_info,omitempty"`
	// Information about how rules were resolved.
	RuleResolveInfo []*FlagResolveInfo_RuleResolveInfo `protobuf:"bytes,3,rep,name=rule_resolve_info,json=ruleResolveInfo,proto3" json:"rule_resolve_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FlagResolveInfo) Reset() {
	*x = FlagResolveInfo{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagResolveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagResolveInfo) ProtoMessage() {}

func (x *FlagResolveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagResolveInfo.ProtoReflect.Descriptor instead.
func (*FlagResolveInfo) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *FlagResolveInfo) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *FlagResolveInfo) GetVariantResolveInfo() []*FlagResolveInfo_VariantResolveInfo {
	if x != nil {
		return x.VariantResolveInfo
	}
	return nil
}

func (x *FlagResolveInfo) GetRuleResolveInfo() []*FlagResolveInfo_RuleResolveInfo {
	if x != nil {
		return x.RuleResolveInfo
	}
	return nil
}

// The type of fields observed in an evaluation context.
type EvaluationContextSchemaField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The observed types.
	Types []EvaluationContextSchemaField_Kind `protobuf:"varint,1,rep,packed,name=types,proto3,enum=confidence.flags.admin.v1.EvaluationContextSchemaField_Kind" json:"types,omitempty"`
	// Human friendly name of the field
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// If the field should be visible or not
	Hidden bool `protobuf:"varint,3,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Semantic type of a field. Makes it possible to narrow the number of possible values for a field etc.
	SemanticType  *ContextFieldSemanticType `protobuf:"bytes,4,opt,name=semantic_type,json=semanticType,proto3" json:"semantic_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvaluationContextSchemaField) Reset() {
	*x = EvaluationContextSchemaField{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvaluationContextSchemaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationContextSchemaField) ProtoMessage() {}

func (x *EvaluationContextSchemaField) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationContextSchemaField.ProtoReflect.Descriptor instead.
func (*EvaluationContextSchemaField) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *EvaluationContextSchemaField) GetTypes() []EvaluationContextSchemaField_Kind {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *EvaluationContextSchemaField) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *EvaluationContextSchemaField) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *EvaluationContextSchemaField) GetSemanticType() *ContextFieldSemanticType {
	if x != nil {
		return x.SemanticType
	}
	return nil
}

// Semantic type of a field. Makes it possible to narrow the number of possible values for a field etc.
type ContextFieldSemanticType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ContextFieldSemanticType_Country
	//	*ContextFieldSemanticType_EnumType
	//	*ContextFieldSemanticType_EntityReference
	//	*ContextFieldSemanticType_Version
	//	*ContextFieldSemanticType_Date
	//	*ContextFieldSemanticType_Timestamp
	Type          isContextFieldSemanticType_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType) Reset() {
	*x = ContextFieldSemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *ContextFieldSemanticType) GetType() isContextFieldSemanticType_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ContextFieldSemanticType) GetCountry() *ContextFieldSemanticType_CountrySemanticType {
	if x != nil {
		if x, ok := x.Type.(*ContextFieldSemanticType_Country); ok {
			return x.Country
		}
	}
	return nil
}

func (x *ContextFieldSemanticType) GetEnumType() *ContextFieldSemanticType_EnumSemanticType {
	if x != nil {
		if x, ok := x.Type.(*ContextFieldSemanticType_EnumType); ok {
			return x.EnumType
		}
	}
	return nil
}

func (x *ContextFieldSemanticType) GetEntityReference() *ContextFieldSemanticType_EntitySemanticType {
	if x != nil {
		if x, ok := x.Type.(*ContextFieldSemanticType_EntityReference); ok {
			return x.EntityReference
		}
	}
	return nil
}

func (x *ContextFieldSemanticType) GetVersion() *ContextFieldSemanticType_VersionSemanticType {
	if x != nil {
		if x, ok := x.Type.(*ContextFieldSemanticType_Version); ok {
			return x.Version
		}
	}
	return nil
}

func (x *ContextFieldSemanticType) GetDate() *ContextFieldSemanticType_DateSemanticType {
	if x != nil {
		if x, ok := x.Type.(*ContextFieldSemanticType_Date); ok {
			return x.Date
		}
	}
	return nil
}

func (x *ContextFieldSemanticType) GetTimestamp() *ContextFieldSemanticType_TimestampSemanticType {
	if x != nil {
		if x, ok := x.Type.(*ContextFieldSemanticType_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

type isContextFieldSemanticType_Type interface {
	isContextFieldSemanticType_Type()
}

type ContextFieldSemanticType_Country struct {
	// (-- api-linter: core::0143::standardized-codes=disabled
	//
	//	aip.dev/not-precedent: We use country. --)
	//
	// If this is a country type, this specifies in what format.
	Country *ContextFieldSemanticType_CountrySemanticType `protobuf:"bytes,1,opt,name=country,proto3,oneof"`
}

type ContextFieldSemanticType_EnumType struct {
	// If this is an enum this specifies what value it has etc.
	EnumType *ContextFieldSemanticType_EnumSemanticType `protobuf:"bytes,2,opt,name=enum_type,json=enumType,proto3,oneof"`
}

type ContextFieldSemanticType_EntityReference struct {
	// If this field is a reference to an entity.
	EntityReference *ContextFieldSemanticType_EntitySemanticType `protobuf:"bytes,3,opt,name=entity_reference,json=entityReference,proto3,oneof"`
}

type ContextFieldSemanticType_Version struct {
	// If this field is a semantic type.
	Version *ContextFieldSemanticType_VersionSemanticType `protobuf:"bytes,4,opt,name=version,proto3,oneof"`
}

type ContextFieldSemanticType_Date struct {
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: This isn't a date but a spec of a date. --)
	//
	// If this field is a date.
	Date *ContextFieldSemanticType_DateSemanticType `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type ContextFieldSemanticType_Timestamp struct {
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: This isn't a timestamp but a spec of a timestamp. --)
	//
	// If this field is a timestamp.
	Timestamp *ContextFieldSemanticType_TimestampSemanticType `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof"`
}

func (*ContextFieldSemanticType_Country) isContextFieldSemanticType_Type() {}

func (*ContextFieldSemanticType_EnumType) isContextFieldSemanticType_Type() {}

func (*ContextFieldSemanticType_EntityReference) isContextFieldSemanticType_Type() {}

func (*ContextFieldSemanticType_Version) isContextFieldSemanticType_Type() {}

func (*ContextFieldSemanticType_Date) isContextFieldSemanticType_Type() {}

func (*ContextFieldSemanticType_Timestamp) isContextFieldSemanticType_Type() {}

// Allocation and coordination of the segment.
type Segment_Allocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fraction of entity population that is eligible for this segment.
	Proportion *decimal.Decimal `protobuf:"bytes,1,opt,name=proportion,proto3" json:"proportion,omitempty"`
	// Set of tags that can be used to coordinate this segment with others.
	ExclusivityTags []string `protobuf:"bytes,3,rep,name=exclusivity_tags,json=exclusivityTags,proto3" json:"exclusivity_tags,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: It means that we're exclusive to other tags, makes sense. --)
	//
	// List of tags that this segment is exclusive to, meaning that an entity
	// cannot be in this segment and also in any segment that has a tag in the
	// list.
	ExclusiveTo   []string `protobuf:"bytes,4,rep,name=exclusive_to,json=exclusiveTo,proto3" json:"exclusive_to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment_Allocation) Reset() {
	*x = Segment_Allocation{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment_Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Allocation) ProtoMessage() {}

func (x *Segment_Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Allocation.ProtoReflect.Descriptor instead.
func (*Segment_Allocation) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Segment_Allocation) GetProportion() *decimal.Decimal {
	if x != nil {
		return x.Proportion
	}
	return nil
}

func (x *Segment_Allocation) GetExclusivityTags() []string {
	if x != nil {
		return x.ExclusivityTags
	}
	return nil
}

func (x *Segment_Allocation) GetExclusiveTo() []string {
	if x != nil {
		return x.ExclusiveTo
	}
	return nil
}

// A bit set where each bit represents a fixed fraction of the entity
// population.
type Segment_BitsetAllocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Byte encoded bitset.
	Bitset        []byte `protobuf:"bytes,1,opt,name=bitset,proto3" json:"bitset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment_BitsetAllocation) Reset() {
	*x = Segment_BitsetAllocation{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment_BitsetAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_BitsetAllocation) ProtoMessage() {}

func (x *Segment_BitsetAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_BitsetAllocation.ProtoReflect.Descriptor instead.
func (*Segment_BitsetAllocation) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Segment_BitsetAllocation) GetBitset() []byte {
	if x != nil {
		return x.Bitset
	}
	return nil
}

// Usage statistics for the flag.
type Flag_UsageMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of resolves of this flag.
	ResolveCount int64 `protobuf:"varint,1,opt,name=resolve_count,json=resolveCount,proto3" json:"resolve_count,omitempty"`
	// The last time this flag was resolved.
	LastResolveTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_resolve_time,json=lastResolveTime,proto3" json:"last_resolve_time,omitempty"`
	// The last time this flag was applied.
	LastApplyTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_apply_time,json=lastApplyTime,proto3" json:"last_apply_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_UsageMetadata) Reset() {
	*x = Flag_UsageMetadata{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_UsageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_UsageMetadata) ProtoMessage() {}

func (x *Flag_UsageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_UsageMetadata.ProtoReflect.Descriptor instead.
func (*Flag_UsageMetadata) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Flag_UsageMetadata) GetResolveCount() int64 {
	if x != nil {
		return x.ResolveCount
	}
	return 0
}

func (x *Flag_UsageMetadata) GetLastResolveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastResolveTime
	}
	return nil
}

func (x *Flag_UsageMetadata) GetLastApplyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastApplyTime
	}
	return nil
}

// A possible named value the flag can assign.
type Flag_Variant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the variant.
	// For example:
	// `flags/my-flag/variants/control`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value that this variant represents. A possibly nested json object.
	Value *structpb.Struct `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// General set of labels for this resource.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A human-friendly description of the variant.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Time when the flag was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the flag was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this variant.
	Creator string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this variant.
	Updater       string `protobuf:"bytes,10,opt,name=updater,proto3" json:"updater,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Variant) Reset() {
	*x = Flag_Variant{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Variant) ProtoMessage() {}

func (x *Flag_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Variant.ProtoReflect.Descriptor instead.
func (*Flag_Variant) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Flag_Variant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag_Variant) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Flag_Variant) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Flag_Variant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Flag_Variant) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Flag_Variant) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Flag_Variant) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Flag_Variant) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

// A rule that decides how a subset of the flags variants are assigned.
type Flag_Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the rule.
	// For example:
	// `flags/my-flag/rules/1bhq4c2zqigdzqg6ufni`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A reference to the segment that this rule uses to specify entities
	// that are eligible.
	Segment string `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
	// Specification of how an entity should be randomly assigned to values.
	AssignmentSpec *Flag_Rule_AssignmentSpec `protobuf:"bytes,12,opt,name=assignment_spec,json=assignmentSpec,proto3" json:"assignment_spec,omitempty"`
	// Metadata about how the flag has been resolved.
	UsageMetadata *Flag_Rule_UsageMetadata `protobuf:"bytes,4,opt,name=usage_metadata,json=usageMetadata,proto3" json:"usage_metadata,omitempty"`
	// Selector of what key to randomize on from the evaluation context.
	// "targeting_key" is the default if not specified
	TargetingKeySelector string `protobuf:"bytes,5,opt,name=targeting_key_selector,json=targetingKeySelector,proto3" json:"targeting_key_selector,omitempty"`
	// Decides if the rule should be enabled for resolve or not.
	Enabled bool `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Time when the rule was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time when the flag was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Reference to the identity that created this rule.
	Creator string `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	// Reference to the identity that last updated this rule.
	Updater string `protobuf:"bytes,15,opt,name=updater,proto3" json:"updater,omitempty"`
	// General set of labels for this resource.
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies if materializations are written to/read from
	MaterializationSpec *Flag_Rule_MaterializationSpec `protobuf:"bytes,13,opt,name=materialization_spec,json=materializationSpec,proto3" json:"materialization_spec,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Flag_Rule) Reset() {
	*x = Flag_Rule{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule) ProtoMessage() {}

func (x *Flag_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule.ProtoReflect.Descriptor instead.
func (*Flag_Rule) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Flag_Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flag_Rule) GetSegment() string {
	if x != nil {
		return x.Segment
	}
	return ""
}

func (x *Flag_Rule) GetAssignmentSpec() *Flag_Rule_AssignmentSpec {
	if x != nil {
		return x.AssignmentSpec
	}
	return nil
}

func (x *Flag_Rule) GetUsageMetadata() *Flag_Rule_UsageMetadata {
	if x != nil {
		return x.UsageMetadata
	}
	return nil
}

func (x *Flag_Rule) GetTargetingKeySelector() string {
	if x != nil {
		return x.TargetingKeySelector
	}
	return ""
}

func (x *Flag_Rule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Flag_Rule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Flag_Rule) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Flag_Rule) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Flag_Rule) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Flag_Rule) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Flag_Rule) GetMaterializationSpec() *Flag_Rule_MaterializationSpec {
	if x != nil {
		return x.MaterializationSpec
	}
	return nil
}

// Specifies if materializations are written to/read from
type Flag_Rule_MaterializationSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Feeds assignments into materialization
	WriteMaterialization string `protobuf:"bytes,1,opt,name=write_materialization,json=writeMaterialization,proto3" json:"write_materialization,omitempty"`
	// Reads assignments from materialization
	ReadMaterialization string `protobuf:"bytes,2,opt,name=read_materialization,json=readMaterialization,proto3" json:"read_materialization,omitempty"`
	// How materialization reads should be treated
	Mode          *Flag_Rule_MaterializationSpec_MaterializationReadMode `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_MaterializationSpec) Reset() {
	*x = Flag_Rule_MaterializationSpec{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_MaterializationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_MaterializationSpec) ProtoMessage() {}

func (x *Flag_Rule_MaterializationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_MaterializationSpec.ProtoReflect.Descriptor instead.
func (*Flag_Rule_MaterializationSpec) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 1}
}

func (x *Flag_Rule_MaterializationSpec) GetWriteMaterialization() string {
	if x != nil {
		return x.WriteMaterialization
	}
	return ""
}

func (x *Flag_Rule_MaterializationSpec) GetReadMaterialization() string {
	if x != nil {
		return x.ReadMaterialization
	}
	return ""
}

func (x *Flag_Rule_MaterializationSpec) GetMode() *Flag_Rule_MaterializationSpec_MaterializationReadMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

// Describes how an entity is randomly assigned to a variant.
type Flag_Rule_AssignmentSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of buckets to consider when randomizing.
	BucketCount int32 `protobuf:"varint,1,opt,name=bucket_count,json=bucketCount,proto3" json:"bucket_count,omitempty"`
	// A list that divides the total buckets into assignments
	Assignments   []*Flag_Rule_Assignment `protobuf:"bytes,2,rep,name=assignments,proto3" json:"assignments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_AssignmentSpec) Reset() {
	*x = Flag_Rule_AssignmentSpec{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_AssignmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_AssignmentSpec) ProtoMessage() {}

func (x *Flag_Rule_AssignmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_AssignmentSpec.ProtoReflect.Descriptor instead.
func (*Flag_Rule_AssignmentSpec) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 2}
}

func (x *Flag_Rule_AssignmentSpec) GetBucketCount() int32 {
	if x != nil {
		return x.BucketCount
	}
	return 0
}

func (x *Flag_Rule_AssignmentSpec) GetAssignments() []*Flag_Rule_Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

// Maps a range of buckets to a value assignment.
type Flag_Rule_Assignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Opaque identifier of this assignment.
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	// Determines how the client should be assigned values.
	//
	// Types that are valid to be assigned to Assignment:
	//
	//	*Flag_Rule_Assignment_Variant
	//	*Flag_Rule_Assignment_Fallthrough
	//	*Flag_Rule_Assignment_ClientDefault
	Assignment isFlag_Rule_Assignment_Assignment `protobuf_oneof:"assignment"`
	// The range of buckets that the variant occupies.
	BucketRanges  []*Flag_Rule_BucketRange `protobuf:"bytes,5,rep,name=bucket_ranges,json=bucketRanges,proto3" json:"bucket_ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_Assignment) Reset() {
	*x = Flag_Rule_Assignment{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_Assignment) ProtoMessage() {}

func (x *Flag_Rule_Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_Assignment.ProtoReflect.Descriptor instead.
func (*Flag_Rule_Assignment) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 3}
}

func (x *Flag_Rule_Assignment) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *Flag_Rule_Assignment) GetAssignment() isFlag_Rule_Assignment_Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *Flag_Rule_Assignment) GetVariant() *Flag_Rule_Assignment_VariantAssignment {
	if x != nil {
		if x, ok := x.Assignment.(*Flag_Rule_Assignment_Variant); ok {
			return x.Variant
		}
	}
	return nil
}

func (x *Flag_Rule_Assignment) GetFallthrough() *Flag_Rule_Assignment_FallthroughAssignment {
	if x != nil {
		if x, ok := x.Assignment.(*Flag_Rule_Assignment_Fallthrough); ok {
			return x.Fallthrough
		}
	}
	return nil
}

func (x *Flag_Rule_Assignment) GetClientDefault() *Flag_Rule_Assignment_ClientDefaultAssignment {
	if x != nil {
		if x, ok := x.Assignment.(*Flag_Rule_Assignment_ClientDefault); ok {
			return x.ClientDefault
		}
	}
	return nil
}

func (x *Flag_Rule_Assignment) GetBucketRanges() []*Flag_Rule_BucketRange {
	if x != nil {
		return x.BucketRanges
	}
	return nil
}

type isFlag_Rule_Assignment_Assignment interface {
	isFlag_Rule_Assignment_Assignment()
}

type Flag_Rule_Assignment_Variant struct {
	// Assign a value from a variant.
	Variant *Flag_Rule_Assignment_VariantAssignment `protobuf:"bytes,2,opt,name=variant,proto3,oneof"`
}

type Flag_Rule_Assignment_Fallthrough struct {
	// Assign a value from the first rule after this one that matches.
	Fallthrough *Flag_Rule_Assignment_FallthroughAssignment `protobuf:"bytes,3,opt,name=fallthrough,proto3,oneof"`
}

type Flag_Rule_Assignment_ClientDefault struct {
	// Assign the default values in the client.
	ClientDefault *Flag_Rule_Assignment_ClientDefaultAssignment `protobuf:"bytes,4,opt,name=client_default,json=clientDefault,proto3,oneof"`
}

func (*Flag_Rule_Assignment_Variant) isFlag_Rule_Assignment_Assignment() {}

func (*Flag_Rule_Assignment_Fallthrough) isFlag_Rule_Assignment_Assignment() {}

func (*Flag_Rule_Assignment_ClientDefault) isFlag_Rule_Assignment_Assignment() {}

// The range of buckets that a variant occupies.
type Flag_Rule_BucketRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The start bucket (inclusive).
	Lower int32 `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	// The end bucket (exclusive).
	Upper         int32 `protobuf:"varint,2,opt,name=upper,proto3" json:"upper,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_BucketRange) Reset() {
	*x = Flag_Rule_BucketRange{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_BucketRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_BucketRange) ProtoMessage() {}

func (x *Flag_Rule_BucketRange) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_BucketRange.ProtoReflect.Descriptor instead.
func (*Flag_Rule_BucketRange) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 4}
}

func (x *Flag_Rule_BucketRange) GetLower() int32 {
	if x != nil {
		return x.Lower
	}
	return 0
}

func (x *Flag_Rule_BucketRange) GetUpper() int32 {
	if x != nil {
		return x.Upper
	}
	return 0
}

// Usage statistics for the rule.
type Flag_Rule_UsageMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of resolves of this rule.
	ResolveCount int64 `protobuf:"varint,1,opt,name=resolve_count,json=resolveCount,proto3" json:"resolve_count,omitempty"`
	// Total number of applies to this rule.
	ApplyCount int64 `protobuf:"varint,4,opt,name=apply_count,json=applyCount,proto3" json:"apply_count,omitempty"`
	// The last time this rule was resolved.
	LastResolveTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_resolve_time,json=lastResolveTime,proto3" json:"last_resolve_time,omitempty"`
	// The last time this rule was applied.
	LastApplyTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_apply_time,json=lastApplyTime,proto3" json:"last_apply_time,omitempty"`
	// Usage statistics for each assignment.
	AssignmentUsageMetadata []*Flag_Rule_AssignmentUsageMetadata `protobuf:"bytes,5,rep,name=assignment_usage_metadata,json=assignmentUsageMetadata,proto3" json:"assignment_usage_metadata,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Flag_Rule_UsageMetadata) Reset() {
	*x = Flag_Rule_UsageMetadata{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_UsageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_UsageMetadata) ProtoMessage() {}

func (x *Flag_Rule_UsageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_UsageMetadata.ProtoReflect.Descriptor instead.
func (*Flag_Rule_UsageMetadata) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 5}
}

func (x *Flag_Rule_UsageMetadata) GetResolveCount() int64 {
	if x != nil {
		return x.ResolveCount
	}
	return 0
}

func (x *Flag_Rule_UsageMetadata) GetApplyCount() int64 {
	if x != nil {
		return x.ApplyCount
	}
	return 0
}

func (x *Flag_Rule_UsageMetadata) GetLastResolveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastResolveTime
	}
	return nil
}

func (x *Flag_Rule_UsageMetadata) GetLastApplyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastApplyTime
	}
	return nil
}

func (x *Flag_Rule_UsageMetadata) GetAssignmentUsageMetadata() []*Flag_Rule_AssignmentUsageMetadata {
	if x != nil {
		return x.AssignmentUsageMetadata
	}
	return nil
}

// Usage statistics for a particular assignment.
type Flag_Rule_AssignmentUsageMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The assignment id, empty means no assignment id was passed.
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	// Total number of resolves.
	ResolveCount int64 `protobuf:"varint,2,opt,name=resolve_count,json=resolveCount,proto3" json:"resolve_count,omitempty"`
	// Total number of applies.
	ApplyCount int64 `protobuf:"varint,3,opt,name=apply_count,json=applyCount,proto3" json:"apply_count,omitempty"`
	// The last time this rule was applied.
	LastApplyTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_apply_time,json=lastApplyTime,proto3" json:"last_apply_time,omitempty"`
	// Total number of applies with empty targeting key.
	EmptyTargetingKeyCount int64 `protobuf:"varint,5,opt,name=empty_targeting_key_count,json=emptyTargetingKeyCount,proto3" json:"empty_targeting_key_count,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Flag_Rule_AssignmentUsageMetadata) Reset() {
	*x = Flag_Rule_AssignmentUsageMetadata{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_AssignmentUsageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_AssignmentUsageMetadata) ProtoMessage() {}

func (x *Flag_Rule_AssignmentUsageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_AssignmentUsageMetadata.ProtoReflect.Descriptor instead.
func (*Flag_Rule_AssignmentUsageMetadata) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 6}
}

func (x *Flag_Rule_AssignmentUsageMetadata) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *Flag_Rule_AssignmentUsageMetadata) GetResolveCount() int64 {
	if x != nil {
		return x.ResolveCount
	}
	return 0
}

func (x *Flag_Rule_AssignmentUsageMetadata) GetApplyCount() int64 {
	if x != nil {
		return x.ApplyCount
	}
	return 0
}

func (x *Flag_Rule_AssignmentUsageMetadata) GetLastApplyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastApplyTime
	}
	return nil
}

func (x *Flag_Rule_AssignmentUsageMetadata) GetEmptyTargetingKeyCount() int64 {
	if x != nil {
		return x.EmptyTargetingKeyCount
	}
	return 0
}

// How materialization reads should be treated
type Flag_Rule_MaterializationSpec_MaterializationReadMode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the materialization must match, only units in the materialization will be in the rule, all other units
	// will skip this rule (also known as paused intake). If this is set to false units will match if they are in
	// the materialization or if they match the segment.
	MaterializationMustMatch bool `protobuf:"varint,1,opt,name=materialization_must_match,json=materializationMustMatch,proto3" json:"materialization_must_match,omitempty"`
	// By default materialization will only be seen as a match of the targeting of the segment that the rule
	// references also matches. Depending on the type of targeting, this may or may not be the wanted behaviour.
	// Setting this to true will mean that any unit in the materialization will match the rule no matter if
	// they match the targeting. Irrespective if this is set to false or true the segment allocation
	// proportion/bucketing is ignored for any unit in the materialization.
	SegmentTargetingCanBeIgnored bool `protobuf:"varint,2,opt,name=segment_targeting_can_be_ignored,json=segmentTargetingCanBeIgnored,proto3" json:"segment_targeting_can_be_ignored,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Flag_Rule_MaterializationSpec_MaterializationReadMode) Reset() {
	*x = Flag_Rule_MaterializationSpec_MaterializationReadMode{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_MaterializationSpec_MaterializationReadMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_MaterializationSpec_MaterializationReadMode) ProtoMessage() {}

func (x *Flag_Rule_MaterializationSpec_MaterializationReadMode) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_MaterializationSpec_MaterializationReadMode.ProtoReflect.Descriptor instead.
func (*Flag_Rule_MaterializationSpec_MaterializationReadMode) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 1, 0}
}

func (x *Flag_Rule_MaterializationSpec_MaterializationReadMode) GetMaterializationMustMatch() bool {
	if x != nil {
		return x.MaterializationMustMatch
	}
	return false
}

func (x *Flag_Rule_MaterializationSpec_MaterializationReadMode) GetSegmentTargetingCanBeIgnored() bool {
	if x != nil {
		return x.SegmentTargetingCanBeIgnored
	}
	return false
}

// Assignment of a variant
type Flag_Rule_Assignment_VariantAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reference to a variant in the flag. Note: the variant must be located
	// in the same flag.
	Variant       string `protobuf:"bytes,1,opt,name=variant,proto3" json:"variant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_Assignment_VariantAssignment) Reset() {
	*x = Flag_Rule_Assignment_VariantAssignment{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_Assignment_VariantAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_Assignment_VariantAssignment) ProtoMessage() {}

func (x *Flag_Rule_Assignment_VariantAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_Assignment_VariantAssignment.ProtoReflect.Descriptor instead.
func (*Flag_Rule_Assignment_VariantAssignment) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 3, 0}
}

func (x *Flag_Rule_Assignment_VariantAssignment) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

// No value will be assigned and passed on to the next rule, an
// event with a fallthrough assignment will be generated.
type Flag_Rule_Assignment_FallthroughAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_Assignment_FallthroughAssignment) Reset() {
	*x = Flag_Rule_Assignment_FallthroughAssignment{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_Assignment_FallthroughAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_Assignment_FallthroughAssignment) ProtoMessage() {}

func (x *Flag_Rule_Assignment_FallthroughAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_Assignment_FallthroughAssignment.ProtoReflect.Descriptor instead.
func (*Flag_Rule_Assignment_FallthroughAssignment) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 3, 1}
}

// No variant will be assigned and the client should return the
// configured default values.
type Flag_Rule_Assignment_ClientDefaultAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag_Rule_Assignment_ClientDefaultAssignment) Reset() {
	*x = Flag_Rule_Assignment_ClientDefaultAssignment{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag_Rule_Assignment_ClientDefaultAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag_Rule_Assignment_ClientDefaultAssignment) ProtoMessage() {}

func (x *Flag_Rule_Assignment_ClientDefaultAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag_Rule_Assignment_ClientDefaultAssignment.ProtoReflect.Descriptor instead.
func (*Flag_Rule_Assignment_ClientDefaultAssignment) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{2, 3, 3, 2}
}

// An instance of a schema that was seen
type ClientResolveInfo_EvaluationContextSchemaInstance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Schema of each field in the evaluation context.
	Schema map[string]EvaluationContextSchemaField_Kind `protobuf:"bytes,1,rep,name=schema,proto3" json:"schema,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=confidence.flags.admin.v1.EvaluationContextSchemaField_Kind"`
	// Optional semantic type per field.
	SemanticTypes map[string]*ContextFieldSemanticType `protobuf:"bytes,2,rep,name=semantic_types,json=semanticTypes,proto3" json:"semantic_types,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientResolveInfo_EvaluationContextSchemaInstance) Reset() {
	*x = ClientResolveInfo_EvaluationContextSchemaInstance{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientResolveInfo_EvaluationContextSchemaInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientResolveInfo_EvaluationContextSchemaInstance) ProtoMessage() {}

func (x *ClientResolveInfo_EvaluationContextSchemaInstance) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientResolveInfo_EvaluationContextSchemaInstance.ProtoReflect.Descriptor instead.
func (*ClientResolveInfo_EvaluationContextSchemaInstance) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ClientResolveInfo_EvaluationContextSchemaInstance) GetSchema() map[string]EvaluationContextSchemaField_Kind {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ClientResolveInfo_EvaluationContextSchemaInstance) GetSemanticTypes() map[string]*ContextFieldSemanticType {
	if x != nil {
		return x.SemanticTypes
	}
	return nil
}

// Information about how a variant was resolved.
type FlagResolveInfo_VariantResolveInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If there was a variant assigned, otherwise not set
	Variant string `protobuf:"bytes,1,opt,name=variant,proto3" json:"variant,omitempty"`
	// Number of times the variant was resolved in this period
	Count         int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagResolveInfo_VariantResolveInfo) Reset() {
	*x = FlagResolveInfo_VariantResolveInfo{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagResolveInfo_VariantResolveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagResolveInfo_VariantResolveInfo) ProtoMessage() {}

func (x *FlagResolveInfo_VariantResolveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagResolveInfo_VariantResolveInfo.ProtoReflect.Descriptor instead.
func (*FlagResolveInfo_VariantResolveInfo) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FlagResolveInfo_VariantResolveInfo) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *FlagResolveInfo_VariantResolveInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Information about how a rule was resolved.
type FlagResolveInfo_RuleResolveInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rule that was resolved
	Rule string `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// Number of times the rule was resolved in this period
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Resolve counts on each assignment
	AssignmentResolveInfo []*FlagResolveInfo_AssignmentResolveInfo `protobuf:"bytes,3,rep,name=assignment_resolve_info,json=assignmentResolveInfo,proto3" json:"assignment_resolve_info,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FlagResolveInfo_RuleResolveInfo) Reset() {
	*x = FlagResolveInfo_RuleResolveInfo{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagResolveInfo_RuleResolveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagResolveInfo_RuleResolveInfo) ProtoMessage() {}

func (x *FlagResolveInfo_RuleResolveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagResolveInfo_RuleResolveInfo.ProtoReflect.Descriptor instead.
func (*FlagResolveInfo_RuleResolveInfo) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{6, 1}
}

func (x *FlagResolveInfo_RuleResolveInfo) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *FlagResolveInfo_RuleResolveInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FlagResolveInfo_RuleResolveInfo) GetAssignmentResolveInfo() []*FlagResolveInfo_AssignmentResolveInfo {
	if x != nil {
		return x.AssignmentResolveInfo
	}
	return nil
}

// Information about the assignment that was resolved.
type FlagResolveInfo_AssignmentResolveInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The assignment id of the resolved value, otherwise not set.
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	// Number of times the assignment id was resolved in this period.
	Count         int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlagResolveInfo_AssignmentResolveInfo) Reset() {
	*x = FlagResolveInfo_AssignmentResolveInfo{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlagResolveInfo_AssignmentResolveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagResolveInfo_AssignmentResolveInfo) ProtoMessage() {}

func (x *FlagResolveInfo_AssignmentResolveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagResolveInfo_AssignmentResolveInfo.ProtoReflect.Descriptor instead.
func (*FlagResolveInfo_AssignmentResolveInfo) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{6, 2}
}

func (x *FlagResolveInfo_AssignmentResolveInfo) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *FlagResolveInfo_AssignmentResolveInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Specifies a semver semantic type
type ContextFieldSemanticType_VersionSemanticType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_VersionSemanticType) Reset() {
	*x = ContextFieldSemanticType_VersionSemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_VersionSemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_VersionSemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType_VersionSemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_VersionSemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_VersionSemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 0}
}

// Specifies a date semantic type
type ContextFieldSemanticType_DateSemanticType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_DateSemanticType) Reset() {
	*x = ContextFieldSemanticType_DateSemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_DateSemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_DateSemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType_DateSemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_DateSemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_DateSemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 1}
}

// Specifies a timestamp semantic type
type ContextFieldSemanticType_TimestampSemanticType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_TimestampSemanticType) Reset() {
	*x = ContextFieldSemanticType_TimestampSemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_TimestampSemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_TimestampSemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType_TimestampSemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_TimestampSemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_TimestampSemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 2}
}

// Specifies a country semantic type.
type ContextFieldSemanticType_CountrySemanticType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What format the country is specified in.
	Format        ContextFieldSemanticType_CountrySemanticType_CountryFormat `protobuf:"varint,1,opt,name=format,proto3,enum=confidence.flags.admin.v1.ContextFieldSemanticType_CountrySemanticType_CountryFormat" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_CountrySemanticType) Reset() {
	*x = ContextFieldSemanticType_CountrySemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_CountrySemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_CountrySemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType_CountrySemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_CountrySemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_CountrySemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 3}
}

func (x *ContextFieldSemanticType_CountrySemanticType) GetFormat() ContextFieldSemanticType_CountrySemanticType_CountryFormat {
	if x != nil {
		return x.Format
	}
	return ContextFieldSemanticType_CountrySemanticType_COUNTRY_FORMAT_UNSPECIFIED
}

// Specifies an enum semantic type.
type ContextFieldSemanticType_EnumSemanticType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What allowed values exist for this enum.
	Values        []*ContextFieldSemanticType_EnumSemanticType_EnumValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_EnumSemanticType) Reset() {
	*x = ContextFieldSemanticType_EnumSemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_EnumSemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_EnumSemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType_EnumSemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_EnumSemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_EnumSemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 4}
}

func (x *ContextFieldSemanticType_EnumSemanticType) GetValues() []*ContextFieldSemanticType_EnumSemanticType_EnumValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Specifies a field that has a semantic type of entity.
type ContextFieldSemanticType_EntitySemanticType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A reference to the entity that exists in this field.-
	Entity        string `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_EntitySemanticType) Reset() {
	*x = ContextFieldSemanticType_EntitySemanticType{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_EntitySemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_EntitySemanticType) ProtoMessage() {}

func (x *ContextFieldSemanticType_EntitySemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_EntitySemanticType.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_EntitySemanticType) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 5}
}

func (x *ContextFieldSemanticType_EntitySemanticType) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

// An allowed value for the enum
type ContextFieldSemanticType_EnumSemanticType_EnumValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A possible value the enum can take.
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextFieldSemanticType_EnumSemanticType_EnumValue) Reset() {
	*x = ContextFieldSemanticType_EnumSemanticType_EnumValue{}
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextFieldSemanticType_EnumSemanticType_EnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextFieldSemanticType_EnumSemanticType_EnumValue) ProtoMessage() {}

func (x *ContextFieldSemanticType_EnumSemanticType_EnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_types_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextFieldSemanticType_EnumSemanticType_EnumValue.ProtoReflect.Descriptor instead.
func (*ContextFieldSemanticType_EnumSemanticType_EnumValue) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_types_proto_rawDescGZIP(), []int{8, 4, 0}
}

func (x *ContextFieldSemanticType_EnumSemanticType_EnumValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_confidence_flags_admin_v1_types_proto protoreflect.FileDescriptor

const file_confidence_flags_admin_v1_types_proto_rawDesc = "" +
	"\n" +
	"%confidence/flags/admin/v1/types.proto\x12\x19confidence.flags.admin.v1\x1a\x19google/api/resource.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/type/decimal.proto\x1a&confidence/flags/types/v1/target.proto\x1a%confidence/flags/types/v1/types.proto\"\xcd\n" +
	"\n" +
	"\aSegment\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\bR\x04name\x12'\n" +
	"\fdisplay_name\x18\f \x01(\tB\x04\xe2A\x01\x01R\vdisplayName\x12B\n" +
	"\ttargeting\x18\x02 \x01(\v2$.confidence.flags.types.v1.TargetingR\ttargeting\x12M\n" +
	"\n" +
	"allocation\x18\x03 \x01(\v2-.confidence.flags.admin.v1.Segment.AllocationR\n" +
	"allocation\x12D\n" +
	"\x05state\x18\x05 \x01(\x0e2(.confidence.flags.admin.v1.Segment.StateB\x04\xe2A\x01\x03R\x05state\x12f\n" +
	"\x11bitset_allocation\x18\x06 \x01(\v23.confidence.flags.admin.v1.Segment.BitsetAllocationB\x04\xe2A\x01\x03R\x10bitsetAllocation\x12F\n" +
	"\x06labels\x18\a \x03(\v2..confidence.flags.admin.v1.Segment.LabelsEntryR\x06labels\x12^\n" +
	"\x11workflow_instance\x18\x10 \x01(\tB1\xe2A\x01\x01\xfaA*\n" +
	"(workflow.confidence.dev/WorkflowInstanceR\x10workflowInstance\x126\n" +
	"\x04flag\x18\x11 \x01(\tB\"\xe2A\x01\x01\xfaA\x1b\n" +
	"\x19flags.confidence.dev/FlagR\x04flag\x12B\n" +
	"\vcreate_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\r \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\x0e \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x12:\n" +
	"\x05owner\x18\x0f \x01(\tB$\xe2A\x01\x01\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\x05owner\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x90\x01\n" +
	"\n" +
	"Allocation\x124\n" +
	"\n" +
	"proportion\x18\x01 \x01(\v2\x14.google.type.DecimalR\n" +
	"proportion\x12)\n" +
	"\x10exclusivity_tags\x18\x03 \x03(\tR\x0fexclusivityTags\x12!\n" +
	"\fexclusive_to\x18\x04 \x03(\tR\vexclusiveTo\x1a*\n" +
	"\x10BitsetAllocation\x12\x16\n" +
	"\x06bitset\x18\x01 \x01(\fR\x06bitset\"T\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x06\n" +
	"\x02OK\x10\x04\x12\x0f\n" +
	"\vUNALLOCATED\x10\x01\x12\r\n" +
	"\tALLOCATED\x10\x02\x12\f\n" +
	"\bARCHIVED\x10\x03:H\xeaAE\n" +
	"\x1cflags.confidence.dev/Segment\x12\x12segments/{segment}*\bsegments2\asegment\"\xb6\x05\n" +
	"\x13MaterializedSegment\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\bR\x04name\x12'\n" +
	"\fdisplay_name\x18\f \x01(\tB\x04\xe2A\x01\x02R\vdisplayName\x12R\n" +
	"\x06labels\x18\a \x03(\v2:.confidence.flags.admin.v1.MaterializedSegment.LabelsEntryR\x06labels\x12B\n" +
	"\vcreate_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\r \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\x0e \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x12:\n" +
	"\x05owner\x18\x0f \x01(\tB$\xe2A\x01\x01\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\x05owner\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x86\x01\xeaA\x82\x01\n" +
	"(flags.confidence.dev/MaterializedSegment\x12+materializedSegments/{materialized_segment}*\x14materializedSegments2\x13materializedSegment\"\xa4%\n" +
	"\x04Flag\x12\x19\n" +
	"\x04name\x18\x01 \x01(\tB\x05\xe2A\x02\x05\bR\x04name\x12&\n" +
	"\vdescription\x18\r \x01(\tB\x04\xe2A\x01\x01R\vdescription\x12T\n" +
	"\x06schema\x18\x02 \x01(\v26.confidence.flags.types.v1.FlagSchema.StructFlagSchemaB\x04\xe2A\x01\x01R\x06schema\x12C\n" +
	"\bvariants\x18\x03 \x03(\v2'.confidence.flags.admin.v1.Flag.VariantR\bvariants\x12B\n" +
	"\x05state\x18\x04 \x01(\x0e2%.confidence.flags.admin.v1.Flag.StateB\x05\xe2A\x02\x03\x02R\x05state\x12:\n" +
	"\x05rules\x18\x05 \x03(\v2$.confidence.flags.admin.v1.Flag.RuleR\x05rules\x128\n" +
	"\aclients\x18\f \x03(\tB\x1e\xfaA\x1b\n" +
	"\x19iam.confidence.dev/ClientR\aclients\x12B\n" +
	"\vcreate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\x0e \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\x0f \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x12C\n" +
	"\x06labels\x18\n" +
	" \x03(\v2+.confidence.flags.admin.v1.Flag.LabelsEntryR\x06labels\x12T\n" +
	"\x0eusage_metadata\x18\v \x01(\v2-.confidence.flags.admin.v1.Flag.UsageMetadataR\rusageMetadata\x12:\n" +
	"\x05owner\x18\x10 \x01(\tB$\xe2A\x01\x01\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\x05owner\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xc0\x01\n" +
	"\rUsageMetadata\x12#\n" +
	"\rresolve_count\x18\x01 \x01(\x03R\fresolveCount\x12F\n" +
	"\x11last_resolve_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastResolveTime\x12B\n" +
	"\x0flast_apply_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rlastApplyTime\x1a\xe4\x04\n" +
	"\aVariant\x12\x19\n" +
	"\x04name\x18\x01 \x01(\tB\x05\xe2A\x02\x02\bR\x04name\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructB\x04\xe2A\x01\x02R\x05value\x12K\n" +
	"\x06labels\x18\x03 \x03(\v23.confidence.flags.admin.v1.Flag.Variant.LabelsEntryR\x06labels\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\x12B\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\t \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\n" +
	" \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:U\xeaAR\n" +
	"\x1cflags.confidence.dev/Variant\x12\x1fflags/{flag}/variants/{variant}*\bvariants2\avariant\x1a\xc8\x16\n" +
	"\x04Rule\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\bR\x04name\x12?\n" +
	"\asegment\x18\x02 \x01(\tB%\xe2A\x01\x02\xfaA\x1e\n" +
	"\x1cflags.confidence.dev/SegmentR\asegment\x12b\n" +
	"\x0fassignment_spec\x18\f \x01(\v23.confidence.flags.admin.v1.Flag.Rule.AssignmentSpecB\x04\xe2A\x01\x02R\x0eassignmentSpec\x12`\n" +
	"\x0eusage_metadata\x18\x04 \x01(\v22.confidence.flags.admin.v1.Flag.Rule.UsageMetadataB\x05\xe2A\x02\x03\x02R\rusageMetadata\x124\n" +
	"\x16targeting_key_selector\x18\x05 \x01(\tR\x14targetingKeySelector\x12\x1e\n" +
	"\aenabled\x18\v \x01(\bB\x04\xe2A\x01\x02R\aenabled\x12B\n" +
	"\vcreate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\x0e \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\x0f \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x12H\n" +
	"\x06labels\x18\n" +
	" \x03(\v20.confidence.flags.admin.v1.Flag.Rule.LabelsEntryR\x06labels\x12k\n" +
	"\x14materialization_spec\x18\r \x01(\v28.confidence.flags.admin.v1.Flag.Rule.MaterializationSpecR\x13materializationSpec\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xf1\x03\n" +
	"\x13MaterializationSpec\x12f\n" +
	"\x15write_materialization\x18\x01 \x01(\tB1\xe2A\x01\x01\xfaA*\n" +
	"(flags.confidence.dev/MaterializedSegmentR\x14writeMaterialization\x12d\n" +
	"\x14read_materialization\x18\x02 \x01(\tB1\xe2A\x01\x01\xfaA*\n" +
	"(flags.confidence.dev/MaterializedSegmentR\x13readMaterialization\x12j\n" +
	"\x04mode\x18\x03 \x01(\v2P.confidence.flags.admin.v1.Flag.Rule.MaterializationSpec.MaterializationReadModeB\x04\xe2A\x01\x01R\x04mode\x1a\x9f\x01\n" +
	"\x17MaterializationReadMode\x12<\n" +
	"\x1amaterialization_must_match\x18\x01 \x01(\bR\x18materializationMustMatch\x12F\n" +
	" segment_targeting_can_be_ignored\x18\x02 \x01(\bR\x1csegmentTargetingCanBeIgnored\x1a\x86\x01\n" +
	"\x0eAssignmentSpec\x12!\n" +
	"\fbucket_count\x18\x01 \x01(\x05R\vbucketCount\x12Q\n" +
	"\vassignments\x18\x02 \x03(\v2/.confidence.flags.admin.v1.Flag.Rule.AssignmentR\vassignments\x1a\xdc\x04\n" +
	"\n" +
	"Assignment\x12#\n" +
	"\rassignment_id\x18\x01 \x01(\tR\fassignmentId\x12]\n" +
	"\avariant\x18\x02 \x01(\v2A.confidence.flags.admin.v1.Flag.Rule.Assignment.VariantAssignmentH\x00R\avariant\x12i\n" +
	"\vfallthrough\x18\x03 \x01(\v2E.confidence.flags.admin.v1.Flag.Rule.Assignment.FallthroughAssignmentH\x00R\vfallthrough\x12p\n" +
	"\x0eclient_default\x18\x04 \x01(\v2G.confidence.flags.admin.v1.Flag.Rule.Assignment.ClientDefaultAssignmentH\x00R\rclientDefault\x12U\n" +
	"\rbucket_ranges\x18\x05 \x03(\v20.confidence.flags.admin.v1.Flag.Rule.BucketRangeR\fbucketRanges\x1aT\n" +
	"\x11VariantAssignment\x12?\n" +
	"\avariant\x18\x01 \x01(\tB%\xe2A\x01\x02\xfaA\x1e\n" +
	"\x1cflags.confidence.dev/VariantR\avariant\x1a\x17\n" +
	"\x15FallthroughAssignment\x1a\x19\n" +
	"\x17ClientDefaultAssignmentB\f\n" +
	"\n" +
	"assignment\x1aE\n" +
	"\vBucketRange\x12\x1a\n" +
	"\x05lower\x18\x01 \x01(\x05B\x04\xe2A\x01\x02R\x05lower\x12\x1a\n" +
	"\x05upper\x18\x02 \x01(\x05B\x04\xe2A\x01\x02R\x05upper\x1a\xdb\x02\n" +
	"\rUsageMetadata\x12#\n" +
	"\rresolve_count\x18\x01 \x01(\x03R\fresolveCount\x12\x1f\n" +
	"\vapply_count\x18\x04 \x01(\x03R\n" +
	"applyCount\x12F\n" +
	"\x11last_resolve_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastResolveTime\x12B\n" +
	"\x0flast_apply_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rlastApplyTime\x12x\n" +
	"\x19assignment_usage_metadata\x18\x05 \x03(\v2<.confidence.flags.admin.v1.Flag.Rule.AssignmentUsageMetadataR\x17assignmentUsageMetadata\x1a\x83\x02\n" +
	"\x17AssignmentUsageMetadata\x12#\n" +
	"\rassignment_id\x18\x01 \x01(\tR\fassignmentId\x12#\n" +
	"\rresolve_count\x18\x02 \x01(\x03R\fresolveCount\x12\x1f\n" +
	"\vapply_count\x18\x03 \x01(\x03R\n" +
	"applyCount\x12B\n" +
	"\x0flast_apply_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rlastApplyTime\x129\n" +
	"\x19empty_targeting_key_count\x18\x05 \x01(\x03R\x16emptyTargetingKeyCount:F\xeaAC\n" +
	"\x19flags.confidence.dev/Rule\x12\x19flags/{flag}/rules/{rule}*\x05rules2\x04rule\"8\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\f\n" +
	"\bARCHIVED\x10\x02:9\xeaA6\n" +
	"\x19flags.confidence.dev/Flag\x12\fflags/{flag}*\x05flags2\x04flag\"\xcd\x05\n" +
	"\fFastlyConfig\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\bR\x04name\x12'\n" +
	"\fdisplay_name\x18\x02 \x01(\tB\x04\xe2A\x01\x01R\vdisplayName\x12\x1d\n" +
	"\n" +
	"service_id\x18\x03 \x01(\tR\tserviceId\x12\x18\n" +
	"\aenabled\x18\t \x01(\bR\aenabled\x12K\n" +
	"\x10last_deploy_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\x0elastDeployTime\x12K\n" +
	"\x06labels\x18\x04 \x03(\v23.confidence.flags.admin.v1.FastlyConfig.LabelsEntryR\x06labels\x12B\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\a \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\b \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:b\xeaA_\n" +
	"!flags.confidence.dev/FastlyConfig\x12\x1dfastlyConfigs/{fastly_config}*\rfastlyConfigs2\ffastlyConfig\"\xd8\a\n" +
	"\x1eEvaluationContextFieldOverride\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\bR\x04name\x12\x1a\n" +
	"\x05field\x18\b \x01(\tB\x04\xe2A\x01\x02R\x05field\x12\x1e\n" +
	"\aclients\x18\t \x03(\tB\x04\xe2A\x01\x01R\aclients\x12V\n" +
	"\x04kind\x18\n" +
	" \x01(\x0e2<.confidence.flags.admin.v1.EvaluationContextSchemaField.KindB\x04\xe2A\x01\x02R\x04kind\x12^\n" +
	"\rsemantic_type\x18\v \x01(\v23.confidence.flags.admin.v1.ContextFieldSemanticTypeB\x04\xe2A\x01\x01R\fsemanticType\x12'\n" +
	"\fdisplay_name\x18\f \x01(\tB\x04\xe2A\x01\x01R\vdisplayName\x12\x1c\n" +
	"\x06hidden\x18\r \x01(\bB\x04\xe2A\x01\x01R\x06hidden\x12c\n" +
	"\x06labels\x18\x02 \x03(\v2E.confidence.flags.admin.v1.EvaluationContextFieldOverride.LabelsEntryB\x04\xe2A\x01\x01R\x06labels\x12B\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"createTime\x12B\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x05\xe2A\x02\x02\x03R\n" +
	"updateTime\x12?\n" +
	"\acreator\x18\x05 \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\acreator\x12?\n" +
	"\aupdater\x18\x06 \x01(\tB%\xe2A\x02\x03\x02\xfaA\x1d\n" +
	"\x1biam.confidence.dev/IdentityR\aupdater\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xb6\x01\xeaA\xb2\x01\n" +
	"3flags.confidence.dev/EvaluationContextFieldOverride\x12:evaluationContextFieldOverrides/{evaluation_context_field}*\x1fevaluationContextFieldOverrides2\x1eevaluationContextFieldOverride\"\x9f\x06\n" +
	"\x11ClientResolveInfo\x12:\n" +
	"\x06client\x18\x01 \x01(\tB\"\xe2A\x01\x02\xfaA\x1b\n" +
	"\x19iam.confidence.dev/ClientR\x06client\x12Y\n" +
	"\x11client_credential\x18\x02 \x01(\tB,\xe2A\x01\x02\xfaA%\n" +
	"#iam.confidence.dev/ClientCredentialR\x10clientCredential\x12d\n" +
	"\x06schema\x18\x03 \x03(\v2L.confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstanceR\x06schema\x1a\x8c\x04\n" +
	"\x1fEvaluationContextSchemaInstance\x12p\n" +
	"\x06schema\x18\x01 \x03(\v2X.confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SchemaEntryR\x06schema\x12\x86\x01\n" +
	"\x0esemantic_types\x18\x02 \x03(\v2_.confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SemanticTypesEntryR\rsemanticTypes\x1aw\n" +
	"\vSchemaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12R\n" +
	"\x05value\x18\x02 \x01(\x0e2<.confidence.flags.admin.v1.EvaluationContextSchemaField.KindR\x05value:\x028\x01\x1au\n" +
	"\x12SemanticTypesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12I\n" +
	"\x05value\x18\x02 \x01(\v23.confidence.flags.admin.v1.ContextFieldSemanticTypeR\x05value:\x028\x01\"\xdd\x05\n" +
	"\x0fFlagResolveInfo\x126\n" +
	"\x04flag\x18\x01 \x01(\tB\"\xe2A\x01\x02\xfaA\x1b\n" +
	"\x19flags.confidence.dev/FlagR\x04flag\x12o\n" +
	"\x14variant_resolve_info\x18\x02 \x03(\v2=.confidence.flags.admin.v1.FlagResolveInfo.VariantResolveInfoR\x12variantResolveInfo\x12f\n" +
	"\x11rule_resolve_info\x18\x03 \x03(\v2:.confidence.flags.admin.v1.FlagResolveInfo.RuleResolveInfoR\x0fruleResolveInfo\x1aq\n" +
	"\x12VariantResolveInfo\x12?\n" +
	"\avariant\x18\x01 \x01(\tB%\xe2A\x01\x01\xfaA\x1e\n" +
	"\x1cflags.confidence.dev/VariantR\avariant\x12\x1a\n" +
	"\x05count\x18\x03 \x01(\x03B\x04\xe2A\x01\x02R\x05count\x1a\xe5\x01\n" +
	"\x0fRuleResolveInfo\x126\n" +
	"\x04rule\x18\x01 \x01(\tB\"\xe2A\x01\x02\xfaA\x1b\n" +
	"\x19flags.confidence.dev/RuleR\x04rule\x12\x1a\n" +
	"\x05count\x18\x02 \x01(\x03B\x04\xe2A\x01\x02R\x05count\x12~\n" +
	"\x17assignment_resolve_info\x18\x03 \x03(\v2@.confidence.flags.admin.v1.FlagResolveInfo.AssignmentResolveInfoB\x04\xe2A\x01\x01R\x15assignmentResolveInfo\x1a^\n" +
	"\x15AssignmentResolveInfo\x12)\n" +
	"\rassignment_id\x18\x01 \x01(\tB\x04\xe2A\x01\x01R\fassignmentId\x12\x1a\n" +
	"\x05count\x18\x02 \x01(\x03B\x04\xe2A\x01\x02R\x05count\"\xe5\x02\n" +
	"\x1cEvaluationContextSchemaField\x12R\n" +
	"\x05types\x18\x01 \x03(\x0e2<.confidence.flags.admin.v1.EvaluationContextSchemaField.KindR\x05types\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12\x16\n" +
	"\x06hidden\x18\x03 \x01(\bR\x06hidden\x12X\n" +
	"\rsemantic_type\x18\x04 \x01(\v23.confidence.flags.admin.v1.ContextFieldSemanticTypeR\fsemanticType\"\\\n" +
	"\x04Kind\x12\x14\n" +
	"\x10KIND_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tNULL_KIND\x10\x01\x12\x0f\n" +
	"\vNUMBER_KIND\x10\x02\x12\x0f\n" +
	"\vSTRING_KIND\x10\x03\x12\r\n" +
	"\tBOOL_KIND\x10\x04\"\xa4\t\n" +
	"\x18ContextFieldSemanticType\x12c\n" +
	"\acountry\x18\x01 \x01(\v2G.confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticTypeH\x00R\acountry\x12c\n" +
	"\tenum_type\x18\x02 \x01(\v2D.confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticTypeH\x00R\benumType\x12s\n" +
	"\x10entity_reference\x18\x03 \x01(\v2F.confidence.flags.admin.v1.ContextFieldSemanticType.EntitySemanticTypeH\x00R\x0fentityReference\x12c\n" +
	"\aversion\x18\x04 \x01(\v2G.confidence.flags.admin.v1.ContextFieldSemanticType.VersionSemanticTypeH\x00R\aversion\x12Z\n" +
	"\x04date\x18\x05 \x01(\v2D.confidence.flags.admin.v1.ContextFieldSemanticType.DateSemanticTypeH\x00R\x04date\x12i\n" +
	"\ttimestamp\x18\x06 \x01(\v2I.confidence.flags.admin.v1.ContextFieldSemanticType.TimestampSemanticTypeH\x00R\ttimestamp\x1a\x15\n" +
	"\x13VersionSemanticType\x1a\x12\n" +
	"\x10DateSemanticType\x1a\x17\n" +
	"\x15TimestampSemanticType\x1a\xd4\x01\n" +
	"\x13CountrySemanticType\x12s\n" +
	"\x06format\x18\x01 \x01(\x0e2U.confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticType.CountryFormatB\x04\xe2A\x01\x02R\x06format\"H\n" +
	"\rCountryFormat\x12\x1e\n" +
	"\x1aCOUNTRY_FORMAT_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13TWO_LETTER_ISO_CODE\x10\x01\x1a\xa3\x01\n" +
	"\x10EnumSemanticType\x12l\n" +
	"\x06values\x18\x01 \x03(\v2N.confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticType.EnumValueB\x04\xe2A\x01\x02R\x06values\x1a!\n" +
	"\tEnumValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x1aT\n" +
	"\x12EntitySemanticType\x12>\n" +
	"\x06entity\x18\x01 \x01(\tB&\xe2A\x01\x02\xfaA\x1f\n" +
	"\x1dmetrics.confidence.dev/EntityR\x06entityB\x06\n" +
	"\x04type*@\n" +
	"\vSegmentView\x12\x1c\n" +
	"\x18SEGMENT_VIEW_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05BASIC\x10\x01\x12\b\n" +
	"\x04FULL\x10\x02B5\n" +
	"%com.spotify.confidence.flags.admin.v1B\n" +
	"TypesProtoP\x01b\x06proto3"

var (
	file_confidence_flags_admin_v1_types_proto_rawDescOnce sync.Once
	file_confidence_flags_admin_v1_types_proto_rawDescData []byte
)

func file_confidence_flags_admin_v1_types_proto_rawDescGZIP() []byte {
	file_confidence_flags_admin_v1_types_proto_rawDescOnce.Do(func() {
		file_confidence_flags_admin_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_confidence_flags_admin_v1_types_proto_rawDesc), len(file_confidence_flags_admin_v1_types_proto_rawDesc)))
	})
	return file_confidence_flags_admin_v1_types_proto_rawDescData
}

var file_confidence_flags_admin_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_confidence_flags_admin_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_confidence_flags_admin_v1_types_proto_goTypes = []any{
	(SegmentView)(0),                       // 0: confidence.flags.admin.v1.SegmentView
	(Segment_State)(0),                     // 1: confidence.flags.admin.v1.Segment.State
	(Flag_State)(0),                        // 2: confidence.flags.admin.v1.Flag.State
	(EvaluationContextSchemaField_Kind)(0), // 3: confidence.flags.admin.v1.EvaluationContextSchemaField.Kind
	(ContextFieldSemanticType_CountrySemanticType_CountryFormat)(0), // 4: confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticType.CountryFormat
	(*Segment)(nil),                        // 5: confidence.flags.admin.v1.Segment
	(*MaterializedSegment)(nil),            // 6: confidence.flags.admin.v1.MaterializedSegment
	(*Flag)(nil),                           // 7: confidence.flags.admin.v1.Flag
	(*FastlyConfig)(nil),                   // 8: confidence.flags.admin.v1.FastlyConfig
	(*EvaluationContextFieldOverride)(nil), // 9: confidence.flags.admin.v1.EvaluationContextFieldOverride
	(*ClientResolveInfo)(nil),              // 10: confidence.flags.admin.v1.ClientResolveInfo
	(*FlagResolveInfo)(nil),                // 11: confidence.flags.admin.v1.FlagResolveInfo
	(*EvaluationContextSchemaField)(nil),   // 12: confidence.flags.admin.v1.EvaluationContextSchemaField
	(*ContextFieldSemanticType)(nil),       // 13: confidence.flags.admin.v1.ContextFieldSemanticType
	nil,                                    // 14: confidence.flags.admin.v1.Segment.LabelsEntry
	(*Segment_Allocation)(nil),             // 15: confidence.flags.admin.v1.Segment.Allocation
	(*Segment_BitsetAllocation)(nil),       // 16: confidence.flags.admin.v1.Segment.BitsetAllocation
	nil,                                    // 17: confidence.flags.admin.v1.MaterializedSegment.LabelsEntry
	nil,                                    // 18: confidence.flags.admin.v1.Flag.LabelsEntry
	(*Flag_UsageMetadata)(nil),             // 19: confidence.flags.admin.v1.Flag.UsageMetadata
	(*Flag_Variant)(nil),                   // 20: confidence.flags.admin.v1.Flag.Variant
	(*Flag_Rule)(nil),                      // 21: confidence.flags.admin.v1.Flag.Rule
	nil,                                    // 22: confidence.flags.admin.v1.Flag.Variant.LabelsEntry
	nil,                                    // 23: confidence.flags.admin.v1.Flag.Rule.LabelsEntry
	(*Flag_Rule_MaterializationSpec)(nil),  // 24: confidence.flags.admin.v1.Flag.Rule.MaterializationSpec
	(*Flag_Rule_AssignmentSpec)(nil),       // 25: confidence.flags.admin.v1.Flag.Rule.AssignmentSpec
	(*Flag_Rule_Assignment)(nil),           // 26: confidence.flags.admin.v1.Flag.Rule.Assignment
	(*Flag_Rule_BucketRange)(nil),          // 27: confidence.flags.admin.v1.Flag.Rule.BucketRange
	(*Flag_Rule_UsageMetadata)(nil),        // 28: confidence.flags.admin.v1.Flag.Rule.UsageMetadata
	(*Flag_Rule_AssignmentUsageMetadata)(nil),                     // 29: confidence.flags.admin.v1.Flag.Rule.AssignmentUsageMetadata
	(*Flag_Rule_MaterializationSpec_MaterializationReadMode)(nil), // 30: confidence.flags.admin.v1.Flag.Rule.MaterializationSpec.MaterializationReadMode
	(*Flag_Rule_Assignment_VariantAssignment)(nil),                // 31: confidence.flags.admin.v1.Flag.Rule.Assignment.VariantAssignment
	(*Flag_Rule_Assignment_FallthroughAssignment)(nil),            // 32: confidence.flags.admin.v1.Flag.Rule.Assignment.FallthroughAssignment
	(*Flag_Rule_Assignment_ClientDefaultAssignment)(nil),          // 33: confidence.flags.admin.v1.Flag.Rule.Assignment.ClientDefaultAssignment
	nil, // 34: confidence.flags.admin.v1.FastlyConfig.LabelsEntry
	nil, // 35: confidence.flags.admin.v1.EvaluationContextFieldOverride.LabelsEntry
	(*ClientResolveInfo_EvaluationContextSchemaInstance)(nil), // 36: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance
	nil, // 37: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SchemaEntry
	nil, // 38: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SemanticTypesEntry
	(*FlagResolveInfo_VariantResolveInfo)(nil),                  // 39: confidence.flags.admin.v1.FlagResolveInfo.VariantResolveInfo
	(*FlagResolveInfo_RuleResolveInfo)(nil),                     // 40: confidence.flags.admin.v1.FlagResolveInfo.RuleResolveInfo
	(*FlagResolveInfo_AssignmentResolveInfo)(nil),               // 41: confidence.flags.admin.v1.FlagResolveInfo.AssignmentResolveInfo
	(*ContextFieldSemanticType_VersionSemanticType)(nil),        // 42: confidence.flags.admin.v1.ContextFieldSemanticType.VersionSemanticType
	(*ContextFieldSemanticType_DateSemanticType)(nil),           // 43: confidence.flags.admin.v1.ContextFieldSemanticType.DateSemanticType
	(*ContextFieldSemanticType_TimestampSemanticType)(nil),      // 44: confidence.flags.admin.v1.ContextFieldSemanticType.TimestampSemanticType
	(*ContextFieldSemanticType_CountrySemanticType)(nil),        // 45: confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticType
	(*ContextFieldSemanticType_EnumSemanticType)(nil),           // 46: confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticType
	(*ContextFieldSemanticType_EntitySemanticType)(nil),         // 47: confidence.flags.admin.v1.ContextFieldSemanticType.EntitySemanticType
	(*ContextFieldSemanticType_EnumSemanticType_EnumValue)(nil), // 48: confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticType.EnumValue
	(*v1.Targeting)(nil),                                        // 49: confidence.flags.types.v1.Targeting
	(*timestamppb.Timestamp)(nil),                               // 50: google.protobuf.Timestamp
	(*v1.FlagSchema_StructFlagSchema)(nil),                      // 51: confidence.flags.types.v1.FlagSchema.StructFlagSchema
	(*decimal.Decimal)(nil),                                     // 52: google.type.Decimal
	(*structpb.Struct)(nil),                                     // 53: google.protobuf.Struct
}
var file_confidence_flags_admin_v1_types_proto_depIdxs = []int32{
	49, // 0: confidence.flags.admin.v1.Segment.targeting:type_name -> confidence.flags.types.v1.Targeting
	15, // 1: confidence.flags.admin.v1.Segment.allocation:type_name -> confidence.flags.admin.v1.Segment.Allocation
	1,  // 2: confidence.flags.admin.v1.Segment.state:type_name -> confidence.flags.admin.v1.Segment.State
	16, // 3: confidence.flags.admin.v1.Segment.bitset_allocation:type_name -> confidence.flags.admin.v1.Segment.BitsetAllocation
	14, // 4: confidence.flags.admin.v1.Segment.labels:type_name -> confidence.flags.admin.v1.Segment.LabelsEntry
	50, // 5: confidence.flags.admin.v1.Segment.create_time:type_name -> google.protobuf.Timestamp
	50, // 6: confidence.flags.admin.v1.Segment.update_time:type_name -> google.protobuf.Timestamp
	17, // 7: confidence.flags.admin.v1.MaterializedSegment.labels:type_name -> confidence.flags.admin.v1.MaterializedSegment.LabelsEntry
	50, // 8: confidence.flags.admin.v1.MaterializedSegment.create_time:type_name -> google.protobuf.Timestamp
	50, // 9: confidence.flags.admin.v1.MaterializedSegment.update_time:type_name -> google.protobuf.Timestamp
	51, // 10: confidence.flags.admin.v1.Flag.schema:type_name -> confidence.flags.types.v1.FlagSchema.StructFlagSchema
	20, // 11: confidence.flags.admin.v1.Flag.variants:type_name -> confidence.flags.admin.v1.Flag.Variant
	2,  // 12: confidence.flags.admin.v1.Flag.state:type_name -> confidence.flags.admin.v1.Flag.State
	21, // 13: confidence.flags.admin.v1.Flag.rules:type_name -> confidence.flags.admin.v1.Flag.Rule
	50, // 14: confidence.flags.admin.v1.Flag.create_time:type_name -> google.protobuf.Timestamp
	50, // 15: confidence.flags.admin.v1.Flag.update_time:type_name -> google.protobuf.Timestamp
	18, // 16: confidence.flags.admin.v1.Flag.labels:type_name -> confidence.flags.admin.v1.Flag.LabelsEntry
	19, // 17: confidence.flags.admin.v1.Flag.usage_metadata:type_name -> confidence.flags.admin.v1.Flag.UsageMetadata
	50, // 18: confidence.flags.admin.v1.FastlyConfig.last_deploy_time:type_name -> google.protobuf.Timestamp
	34, // 19: confidence.flags.admin.v1.FastlyConfig.labels:type_name -> confidence.flags.admin.v1.FastlyConfig.LabelsEntry
	50, // 20: confidence.flags.admin.v1.FastlyConfig.create_time:type_name -> google.protobuf.Timestamp
	50, // 21: confidence.flags.admin.v1.FastlyConfig.update_time:type_name -> google.protobuf.Timestamp
	3,  // 22: confidence.flags.admin.v1.EvaluationContextFieldOverride.kind:type_name -> confidence.flags.admin.v1.EvaluationContextSchemaField.Kind
	13, // 23: confidence.flags.admin.v1.EvaluationContextFieldOverride.semantic_type:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType
	35, // 24: confidence.flags.admin.v1.EvaluationContextFieldOverride.labels:type_name -> confidence.flags.admin.v1.EvaluationContextFieldOverride.LabelsEntry
	50, // 25: confidence.flags.admin.v1.EvaluationContextFieldOverride.create_time:type_name -> google.protobuf.Timestamp
	50, // 26: confidence.flags.admin.v1.EvaluationContextFieldOverride.update_time:type_name -> google.protobuf.Timestamp
	36, // 27: confidence.flags.admin.v1.ClientResolveInfo.schema:type_name -> confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance
	39, // 28: confidence.flags.admin.v1.FlagResolveInfo.variant_resolve_info:type_name -> confidence.flags.admin.v1.FlagResolveInfo.VariantResolveInfo
	40, // 29: confidence.flags.admin.v1.FlagResolveInfo.rule_resolve_info:type_name -> confidence.flags.admin.v1.FlagResolveInfo.RuleResolveInfo
	3,  // 30: confidence.flags.admin.v1.EvaluationContextSchemaField.types:type_name -> confidence.flags.admin.v1.EvaluationContextSchemaField.Kind
	13, // 31: confidence.flags.admin.v1.EvaluationContextSchemaField.semantic_type:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType
	45, // 32: confidence.flags.admin.v1.ContextFieldSemanticType.country:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticType
	46, // 33: confidence.flags.admin.v1.ContextFieldSemanticType.enum_type:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticType
	47, // 34: confidence.flags.admin.v1.ContextFieldSemanticType.entity_reference:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.EntitySemanticType
	42, // 35: confidence.flags.admin.v1.ContextFieldSemanticType.version:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.VersionSemanticType
	43, // 36: confidence.flags.admin.v1.ContextFieldSemanticType.date:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.DateSemanticType
	44, // 37: confidence.flags.admin.v1.ContextFieldSemanticType.timestamp:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.TimestampSemanticType
	52, // 38: confidence.flags.admin.v1.Segment.Allocation.proportion:type_name -> google.type.Decimal
	50, // 39: confidence.flags.admin.v1.Flag.UsageMetadata.last_resolve_time:type_name -> google.protobuf.Timestamp
	50, // 40: confidence.flags.admin.v1.Flag.UsageMetadata.last_apply_time:type_name -> google.protobuf.Timestamp
	53, // 41: confidence.flags.admin.v1.Flag.Variant.value:type_name -> google.protobuf.Struct
	22, // 42: confidence.flags.admin.v1.Flag.Variant.labels:type_name -> confidence.flags.admin.v1.Flag.Variant.LabelsEntry
	50, // 43: confidence.flags.admin.v1.Flag.Variant.create_time:type_name -> google.protobuf.Timestamp
	50, // 44: confidence.flags.admin.v1.Flag.Variant.update_time:type_name -> google.protobuf.Timestamp
	25, // 45: confidence.flags.admin.v1.Flag.Rule.assignment_spec:type_name -> confidence.flags.admin.v1.Flag.Rule.AssignmentSpec
	28, // 46: confidence.flags.admin.v1.Flag.Rule.usage_metadata:type_name -> confidence.flags.admin.v1.Flag.Rule.UsageMetadata
	50, // 47: confidence.flags.admin.v1.Flag.Rule.create_time:type_name -> google.protobuf.Timestamp
	50, // 48: confidence.flags.admin.v1.Flag.Rule.update_time:type_name -> google.protobuf.Timestamp
	23, // 49: confidence.flags.admin.v1.Flag.Rule.labels:type_name -> confidence.flags.admin.v1.Flag.Rule.LabelsEntry
	24, // 50: confidence.flags.admin.v1.Flag.Rule.materialization_spec:type_name -> confidence.flags.admin.v1.Flag.Rule.MaterializationSpec
	30, // 51: confidence.flags.admin.v1.Flag.Rule.MaterializationSpec.mode:type_name -> confidence.flags.admin.v1.Flag.Rule.MaterializationSpec.MaterializationReadMode
	26, // 52: confidence.flags.admin.v1.Flag.Rule.AssignmentSpec.assignments:type_name -> confidence.flags.admin.v1.Flag.Rule.Assignment
	31, // 53: confidence.flags.admin.v1.Flag.Rule.Assignment.variant:type_name -> confidence.flags.admin.v1.Flag.Rule.Assignment.VariantAssignment
	32, // 54: confidence.flags.admin.v1.Flag.Rule.Assignment.fallthrough:type_name -> confidence.flags.admin.v1.Flag.Rule.Assignment.FallthroughAssignment
	33, // 55: confidence.flags.admin.v1.Flag.Rule.Assignment.client_default:type_name -> confidence.flags.admin.v1.Flag.Rule.Assignment.ClientDefaultAssignment
	27, // 56: confidence.flags.admin.v1.Flag.Rule.Assignment.bucket_ranges:type_name -> confidence.flags.admin.v1.Flag.Rule.BucketRange
	50, // 57: confidence.flags.admin.v1.Flag.Rule.UsageMetadata.last_resolve_time:type_name -> google.protobuf.Timestamp
	50, // 58: confidence.flags.admin.v1.Flag.Rule.UsageMetadata.last_apply_time:type_name -> google.protobuf.Timestamp
	29, // 59: confidence.flags.admin.v1.Flag.Rule.UsageMetadata.assignment_usage_metadata:type_name -> confidence.flags.admin.v1.Flag.Rule.AssignmentUsageMetadata
	50, // 60: confidence.flags.admin.v1.Flag.Rule.AssignmentUsageMetadata.last_apply_time:type_name -> google.protobuf.Timestamp
	37, // 61: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.schema:type_name -> confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SchemaEntry
	38, // 62: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.semantic_types:type_name -> confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SemanticTypesEntry
	3,  // 63: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SchemaEntry.value:type_name -> confidence.flags.admin.v1.EvaluationContextSchemaField.Kind
	13, // 64: confidence.flags.admin.v1.ClientResolveInfo.EvaluationContextSchemaInstance.SemanticTypesEntry.value:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType
	41, // 65: confidence.flags.admin.v1.FlagResolveInfo.RuleResolveInfo.assignment_resolve_info:type_name -> confidence.flags.admin.v1.FlagResolveInfo.AssignmentResolveInfo
	4,  // 66: confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticType.format:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.CountrySemanticType.CountryFormat
	48, // 67: confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticType.values:type_name -> confidence.flags.admin.v1.ContextFieldSemanticType.EnumSemanticType.EnumValue
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_confidence_flags_admin_v1_types_proto_init() }
func file_confidence_flags_admin_v1_types_proto_init() {
	if File_confidence_flags_admin_v1_types_proto != nil {
		return
	}
	file_confidence_flags_admin_v1_types_proto_msgTypes[8].OneofWrappers = []any{
		(*ContextFieldSemanticType_Country)(nil),
		(*ContextFieldSemanticType_EnumType)(nil),
		(*ContextFieldSemanticType_EntityReference)(nil),
		(*ContextFieldSemanticType_Version)(nil),
		(*ContextFieldSemanticType_Date)(nil),
		(*ContextFieldSemanticType_Timestamp)(nil),
	}
	file_confidence_flags_admin_v1_types_proto_msgTypes[21].OneofWrappers = []any{
		(*Flag_Rule_Assignment_Variant)(nil),
		(*Flag_Rule_Assignment_Fallthrough)(nil),
		(*Flag_Rule_Assignment_ClientDefault)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_confidence_flags_admin_v1_types_proto_rawDesc), len(file_confidence_flags_admin_v1_types_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_confidence_flags_admin_v1_types_proto_goTypes,
		DependencyIndexes: file_confidence_flags_admin_v1_types_proto_depIdxs,
		EnumInfos:         file_confidence_flags_admin_v1_types_proto_enumTypes,
		MessageInfos:      file_confidence_flags_admin_v1_types_proto_msgTypes,
	}.Build()
	File_confidence_flags_admin_v1_types_proto = out.File
	file_confidence_flags_admin_v1_types_proto_goTypes = nil
	file_confidence_flags_admin_v1_types_proto_depIdxs = nil
}
