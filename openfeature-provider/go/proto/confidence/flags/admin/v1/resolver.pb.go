// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: confidence/flags/admin/v1/resolver.proto

package v1

import (
	_ "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/api"
	_ "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/auth/v1"
	v1 "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/iam/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An account region
type ResolverState_Region int32

const (
	// Region is not set
	ResolverState_REGION_UNSPECIFIED ResolverState_Region = 0
	// EU region
	ResolverState_REGION_EU ResolverState_Region = 1
	// US region
	ResolverState_REGION_US ResolverState_Region = 2
)

// Enum value maps for ResolverState_Region.
var (
	ResolverState_Region_name = map[int32]string{
		0: "REGION_UNSPECIFIED",
		1: "REGION_EU",
		2: "REGION_US",
	}
	ResolverState_Region_value = map[string]int32{
		"REGION_UNSPECIFIED": 0,
		"REGION_EU":          1,
		"REGION_US":          2,
	}
)

func (x ResolverState_Region) Enum() *ResolverState_Region {
	p := new(ResolverState_Region)
	*p = x
	return p
}

func (x ResolverState_Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverState_Region) Descriptor() protoreflect.EnumDescriptor {
	return file_confidence_flags_admin_v1_resolver_proto_enumTypes[0].Descriptor()
}

func (ResolverState_Region) Type() protoreflect.EnumType {
	return &file_confidence_flags_admin_v1_resolver_proto_enumTypes[0]
}

func (x ResolverState_Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverState_Region.Descriptor instead.
func (ResolverState_Region) EnumDescriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP(), []int{3, 0}
}

// Request to fetch resolver state uri
type ResolverStateUriRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverStateUriRequest) Reset() {
	*x = ResolverStateUriRequest{}
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverStateUriRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverStateUriRequest) ProtoMessage() {}

func (x *ResolverStateUriRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverStateUriRequest.ProtoReflect.Descriptor instead.
func (*ResolverStateUriRequest) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP(), []int{0}
}

// Response of fetching resolver state uri
type ResolverStateUriResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The signed uri that can be used to fetch state
	SignedUri string `protobuf:"bytes,1,opt,name=signed_uri,json=signedUri,proto3" json:"signed_uri,omitempty"`
	// At what time the state uri expires
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// The account the referenced state belongs to
	Account       string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverStateUriResponse) Reset() {
	*x = ResolverStateUriResponse{}
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverStateUriResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverStateUriResponse) ProtoMessage() {}

func (x *ResolverStateUriResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverStateUriResponse.ProtoReflect.Descriptor instead.
func (*ResolverStateUriResponse) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP(), []int{1}
}

func (x *ResolverStateUriResponse) GetSignedUri() string {
	if x != nil {
		return x.SignedUri
	}
	return ""
}

func (x *ResolverStateUriResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *ResolverStateUriResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

// Request to get the resolver state for the whole account
type ResolverStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverStateRequest) Reset() {
	*x = ResolverStateRequest{}
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverStateRequest) ProtoMessage() {}

func (x *ResolverStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverStateRequest.ProtoReflect.Descriptor instead.
func (*ResolverStateRequest) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP(), []int{2}
}

// The full state for operating a flags resolver
type ResolverState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All active flags
	Flags []*Flag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
	// All allocated segments, but without the `bitset_allocation` field set. The actual bitsets will be packed and sent
	// separately.
	SegmentsNoBitsets []*Segment `protobuf:"bytes,2,rep,name=segments_no_bitsets,json=segmentsNoBitsets,proto3" json:"segments_no_bitsets,omitempty"`
	// Packed bitsets for the segments
	Bitsets []*ResolverState_PackedBitset `protobuf:"bytes,5,rep,name=bitsets,proto3" json:"bitsets,omitempty"`
	// All clients
	Clients []*v1.Client `protobuf:"bytes,6,rep,name=clients,proto3" json:"clients,omitempty"`
	// All client credentials
	ClientCredentials []*v1.ClientCredential `protobuf:"bytes,7,rep,name=client_credentials,json=clientCredentials,proto3" json:"client_credentials,omitempty"`
	// The region of the account
	Region        ResolverState_Region `protobuf:"varint,8,opt,name=region,proto3,enum=confidence.flags.admin.v1.ResolverState_Region" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverState) Reset() {
	*x = ResolverState{}
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverState) ProtoMessage() {}

func (x *ResolverState) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverState.ProtoReflect.Descriptor instead.
func (*ResolverState) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP(), []int{3}
}

func (x *ResolverState) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ResolverState) GetSegmentsNoBitsets() []*Segment {
	if x != nil {
		return x.SegmentsNoBitsets
	}
	return nil
}

func (x *ResolverState) GetBitsets() []*ResolverState_PackedBitset {
	if x != nil {
		return x.Bitsets
	}
	return nil
}

func (x *ResolverState) GetClients() []*v1.Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *ResolverState) GetClientCredentials() []*v1.ClientCredential {
	if x != nil {
		return x.ClientCredentials
	}
	return nil
}

func (x *ResolverState) GetRegion() ResolverState_Region {
	if x != nil {
		return x.Region
	}
	return ResolverState_REGION_UNSPECIFIED
}

// A compressed bitset for a specific segment. The bitset will be gzipped, unless it's all ones, in which case the
// `full_bitset` field will be set instead.
type ResolverState_PackedBitset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The segment which this bitset belongs to
	Segment string `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	// Types that are valid to be assigned to Bitset:
	//
	//	*ResolverState_PackedBitset_GzippedBitset
	//	*ResolverState_PackedBitset_FullBitset
	Bitset        isResolverState_PackedBitset_Bitset `protobuf_oneof:"bitset"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolverState_PackedBitset) Reset() {
	*x = ResolverState_PackedBitset{}
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverState_PackedBitset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverState_PackedBitset) ProtoMessage() {}

func (x *ResolverState_PackedBitset) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_admin_v1_resolver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverState_PackedBitset.ProtoReflect.Descriptor instead.
func (*ResolverState_PackedBitset) Descriptor() ([]byte, []int) {
	return file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ResolverState_PackedBitset) GetSegment() string {
	if x != nil {
		return x.Segment
	}
	return ""
}

func (x *ResolverState_PackedBitset) GetBitset() isResolverState_PackedBitset_Bitset {
	if x != nil {
		return x.Bitset
	}
	return nil
}

func (x *ResolverState_PackedBitset) GetGzippedBitset() []byte {
	if x != nil {
		if x, ok := x.Bitset.(*ResolverState_PackedBitset_GzippedBitset); ok {
			return x.GzippedBitset
		}
	}
	return nil
}

func (x *ResolverState_PackedBitset) GetFullBitset() bool {
	if x != nil {
		if x, ok := x.Bitset.(*ResolverState_PackedBitset_FullBitset); ok {
			return x.FullBitset
		}
	}
	return false
}

type isResolverState_PackedBitset_Bitset interface {
	isResolverState_PackedBitset_Bitset()
}

type ResolverState_PackedBitset_GzippedBitset struct {
	// A gzip compressed bitset
	GzippedBitset []byte `protobuf:"bytes,2,opt,name=gzipped_bitset,json=gzippedBitset,proto3,oneof"`
}

type ResolverState_PackedBitset_FullBitset struct {
	// Set to true if all bits in the bitset are set
	FullBitset bool `protobuf:"varint,3,opt,name=full_bitset,json=fullBitset,proto3,oneof"`
}

func (*ResolverState_PackedBitset_GzippedBitset) isResolverState_PackedBitset_Bitset() {}

func (*ResolverState_PackedBitset_FullBitset) isResolverState_PackedBitset_Bitset() {}

var File_confidence_flags_admin_v1_resolver_proto protoreflect.FileDescriptor

const file_confidence_flags_admin_v1_resolver_proto_rawDesc = "" +
	"\n" +
	"(confidence/flags/admin/v1/resolver.proto\x12\x19confidence.flags.admin.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/api/resource.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a%confidence/flags/admin/v1/types.proto\x1a\x1bconfidence/iam/v1/iam.proto\x1a confidence/api/annotations.proto\x1a\x1dconfidence/auth/v1/auth.proto\"\x19\n" +
	"\x17ResolverStateUriRequest\"\x90\x01\n" +
	"\x18ResolverStateUriResponse\x12\x1d\n" +
	"\n" +
	"signed_uri\x18\x01 \x01(\tR\tsignedUri\x12;\n" +
	"\vexpire_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expireTime\x12\x18\n" +
	"\aaccount\x18\x03 \x01(\tR\aaccount\"\x16\n" +
	"\x14ResolverStateRequest\"\xa1\x05\n" +
	"\rResolverState\x125\n" +
	"\x05flags\x18\x01 \x03(\v2\x1f.confidence.flags.admin.v1.FlagR\x05flags\x12R\n" +
	"\x13segments_no_bitsets\x18\x02 \x03(\v2\".confidence.flags.admin.v1.SegmentR\x11segmentsNoBitsets\x12O\n" +
	"\abitsets\x18\x05 \x03(\v25.confidence.flags.admin.v1.ResolverState.PackedBitsetR\abitsets\x123\n" +
	"\aclients\x18\x06 \x03(\v2\x19.confidence.iam.v1.ClientR\aclients\x12R\n" +
	"\x12client_credentials\x18\a \x03(\v2#.confidence.iam.v1.ClientCredentialR\x11clientCredentials\x12G\n" +
	"\x06region\x18\b \x01(\x0e2/.confidence.flags.admin.v1.ResolverState.RegionR\x06region\x1a\xa1\x01\n" +
	"\fPackedBitset\x12;\n" +
	"\asegment\x18\x01 \x01(\tB!\xfaA\x1e\n" +
	"\x1cflags.confidence.dev/SegmentR\asegment\x12'\n" +
	"\x0egzipped_bitset\x18\x02 \x01(\fH\x00R\rgzippedBitset\x12!\n" +
	"\vfull_bitset\x18\x03 \x01(\bH\x00R\n" +
	"fullBitsetB\b\n" +
	"\x06bitset\">\n" +
	"\x06Region\x12\x16\n" +
	"\x12REGION_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tREGION_EU\x10\x01\x12\r\n" +
	"\tREGION_US\x10\x022\xd1\x03\n" +
	"\x14ResolverStateService\x12\xad\x01\n" +
	"\x11FullResolverState\x12/.confidence.flags.admin.v1.ResolverStateRequest\x1a(.confidence.flags.admin.v1.ResolverState\";ʇ\xe4\x10\x18\"\aaccount*\rcan_view_flag\x82\xd3\xe4\x93\x02\x18\x12\x16/v1/resolverState:full0\x01\x12\xc4\x01\n" +
	"\x10ResolverStateUri\x122.confidence.flags.admin.v1.ResolverStateUriRequest\x1a3.confidence.flags.admin.v1.ResolverStateUriResponse\"Gʇ\xe4\x10\x18\"\aaccount*\rcan_view_flag\x82\xd3\xe4\x93\x02$\x12\"/v1/resolverState:resolverStateUri\x1aB\xe2\x87\xe4\x10\x17flags.eu.confidence.dev\xe2\x87\xe4\x10\x17flags.us.confidence.dev\xea\x87\xe4\x10\x05FlagsB8\n" +
	"%com.spotify.confidence.flags.admin.v1B\rResolverProtoP\x01b\x06proto3"

var (
	file_confidence_flags_admin_v1_resolver_proto_rawDescOnce sync.Once
	file_confidence_flags_admin_v1_resolver_proto_rawDescData []byte
)

func file_confidence_flags_admin_v1_resolver_proto_rawDescGZIP() []byte {
	file_confidence_flags_admin_v1_resolver_proto_rawDescOnce.Do(func() {
		file_confidence_flags_admin_v1_resolver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_confidence_flags_admin_v1_resolver_proto_rawDesc), len(file_confidence_flags_admin_v1_resolver_proto_rawDesc)))
	})
	return file_confidence_flags_admin_v1_resolver_proto_rawDescData
}

var file_confidence_flags_admin_v1_resolver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_confidence_flags_admin_v1_resolver_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_confidence_flags_admin_v1_resolver_proto_goTypes = []any{
	(ResolverState_Region)(0),          // 0: confidence.flags.admin.v1.ResolverState.Region
	(*ResolverStateUriRequest)(nil),    // 1: confidence.flags.admin.v1.ResolverStateUriRequest
	(*ResolverStateUriResponse)(nil),   // 2: confidence.flags.admin.v1.ResolverStateUriResponse
	(*ResolverStateRequest)(nil),       // 3: confidence.flags.admin.v1.ResolverStateRequest
	(*ResolverState)(nil),              // 4: confidence.flags.admin.v1.ResolverState
	(*ResolverState_PackedBitset)(nil), // 5: confidence.flags.admin.v1.ResolverState.PackedBitset
	(*timestamppb.Timestamp)(nil),      // 6: google.protobuf.Timestamp
	(*Flag)(nil),                       // 7: confidence.flags.admin.v1.Flag
	(*Segment)(nil),                    // 8: confidence.flags.admin.v1.Segment
	(*v1.Client)(nil),                  // 9: confidence.iam.v1.Client
	(*v1.ClientCredential)(nil),        // 10: confidence.iam.v1.ClientCredential
}
var file_confidence_flags_admin_v1_resolver_proto_depIdxs = []int32{
	6,  // 0: confidence.flags.admin.v1.ResolverStateUriResponse.expire_time:type_name -> google.protobuf.Timestamp
	7,  // 1: confidence.flags.admin.v1.ResolverState.flags:type_name -> confidence.flags.admin.v1.Flag
	8,  // 2: confidence.flags.admin.v1.ResolverState.segments_no_bitsets:type_name -> confidence.flags.admin.v1.Segment
	5,  // 3: confidence.flags.admin.v1.ResolverState.bitsets:type_name -> confidence.flags.admin.v1.ResolverState.PackedBitset
	9,  // 4: confidence.flags.admin.v1.ResolverState.clients:type_name -> confidence.iam.v1.Client
	10, // 5: confidence.flags.admin.v1.ResolverState.client_credentials:type_name -> confidence.iam.v1.ClientCredential
	0,  // 6: confidence.flags.admin.v1.ResolverState.region:type_name -> confidence.flags.admin.v1.ResolverState.Region
	3,  // 7: confidence.flags.admin.v1.ResolverStateService.FullResolverState:input_type -> confidence.flags.admin.v1.ResolverStateRequest
	1,  // 8: confidence.flags.admin.v1.ResolverStateService.ResolverStateUri:input_type -> confidence.flags.admin.v1.ResolverStateUriRequest
	4,  // 9: confidence.flags.admin.v1.ResolverStateService.FullResolverState:output_type -> confidence.flags.admin.v1.ResolverState
	2,  // 10: confidence.flags.admin.v1.ResolverStateService.ResolverStateUri:output_type -> confidence.flags.admin.v1.ResolverStateUriResponse
	9,  // [9:11] is the sub-list for method output_type
	7,  // [7:9] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_confidence_flags_admin_v1_resolver_proto_init() }
func file_confidence_flags_admin_v1_resolver_proto_init() {
	if File_confidence_flags_admin_v1_resolver_proto != nil {
		return
	}
	file_confidence_flags_admin_v1_types_proto_init()
	file_confidence_flags_admin_v1_resolver_proto_msgTypes[4].OneofWrappers = []any{
		(*ResolverState_PackedBitset_GzippedBitset)(nil),
		(*ResolverState_PackedBitset_FullBitset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_confidence_flags_admin_v1_resolver_proto_rawDesc), len(file_confidence_flags_admin_v1_resolver_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_confidence_flags_admin_v1_resolver_proto_goTypes,
		DependencyIndexes: file_confidence_flags_admin_v1_resolver_proto_depIdxs,
		EnumInfos:         file_confidence_flags_admin_v1_resolver_proto_enumTypes,
		MessageInfos:      file_confidence_flags_admin_v1_resolver_proto_msgTypes,
	}.Build()
	File_confidence_flags_admin_v1_resolver_proto = out.File
	file_confidence_flags_admin_v1_resolver_proto_goTypes = nil
	file_confidence_flags_admin_v1_resolver_proto_depIdxs = nil
}
