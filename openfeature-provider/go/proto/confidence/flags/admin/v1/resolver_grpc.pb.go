// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: confidence/flags/admin/v1/resolver.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResolverStateService_FullResolverState_FullMethodName = "/confidence.flags.admin.v1.ResolverStateService/FullResolverState"
	ResolverStateService_ResolverStateUri_FullMethodName  = "/confidence.flags.admin.v1.ResolverStateService/ResolverStateUri"
)

// ResolverStateServiceClient is the client API for ResolverStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for fetching the state for resolving flags
type ResolverStateServiceClient interface {
	// Gets the full state for running a resolver
	FullResolverState(ctx context.Context, in *ResolverStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResolverState], error)
	// Gets a signed uri that can be used to download the current resolver state
	ResolverStateUri(ctx context.Context, in *ResolverStateUriRequest, opts ...grpc.CallOption) (*ResolverStateUriResponse, error)
}

type resolverStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResolverStateServiceClient(cc grpc.ClientConnInterface) ResolverStateServiceClient {
	return &resolverStateServiceClient{cc}
}

func (c *resolverStateServiceClient) FullResolverState(ctx context.Context, in *ResolverStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResolverState], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResolverStateService_ServiceDesc.Streams[0], ResolverStateService_FullResolverState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResolverStateRequest, ResolverState]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResolverStateService_FullResolverStateClient = grpc.ServerStreamingClient[ResolverState]

func (c *resolverStateServiceClient) ResolverStateUri(ctx context.Context, in *ResolverStateUriRequest, opts ...grpc.CallOption) (*ResolverStateUriResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolverStateUriResponse)
	err := c.cc.Invoke(ctx, ResolverStateService_ResolverStateUri_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResolverStateServiceServer is the server API for ResolverStateService service.
// All implementations must embed UnimplementedResolverStateServiceServer
// for forward compatibility.
//
// Service for fetching the state for resolving flags
type ResolverStateServiceServer interface {
	// Gets the full state for running a resolver
	FullResolverState(*ResolverStateRequest, grpc.ServerStreamingServer[ResolverState]) error
	// Gets a signed uri that can be used to download the current resolver state
	ResolverStateUri(context.Context, *ResolverStateUriRequest) (*ResolverStateUriResponse, error)
	mustEmbedUnimplementedResolverStateServiceServer()
}

// UnimplementedResolverStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResolverStateServiceServer struct{}

func (UnimplementedResolverStateServiceServer) FullResolverState(*ResolverStateRequest, grpc.ServerStreamingServer[ResolverState]) error {
	return status.Errorf(codes.Unimplemented, "method FullResolverState not implemented")
}
func (UnimplementedResolverStateServiceServer) ResolverStateUri(context.Context, *ResolverStateUriRequest) (*ResolverStateUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolverStateUri not implemented")
}
func (UnimplementedResolverStateServiceServer) mustEmbedUnimplementedResolverStateServiceServer() {}
func (UnimplementedResolverStateServiceServer) testEmbeddedByValue()                              {}

// UnsafeResolverStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResolverStateServiceServer will
// result in compilation errors.
type UnsafeResolverStateServiceServer interface {
	mustEmbedUnimplementedResolverStateServiceServer()
}

func RegisterResolverStateServiceServer(s grpc.ServiceRegistrar, srv ResolverStateServiceServer) {
	// If the following call pancis, it indicates UnimplementedResolverStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResolverStateService_ServiceDesc, srv)
}

func _ResolverStateService_FullResolverState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResolverStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResolverStateServiceServer).FullResolverState(m, &grpc.GenericServerStream[ResolverStateRequest, ResolverState]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResolverStateService_FullResolverStateServer = grpc.ServerStreamingServer[ResolverState]

func _ResolverStateService_ResolverStateUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolverStateUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolverStateServiceServer).ResolverStateUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResolverStateService_ResolverStateUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolverStateServiceServer).ResolverStateUri(ctx, req.(*ResolverStateUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResolverStateService_ServiceDesc is the grpc.ServiceDesc for ResolverStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResolverStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "confidence.flags.admin.v1.ResolverStateService",
	HandlerType: (*ResolverStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolverStateUri",
			Handler:    _ResolverStateService_ResolverStateUri_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FullResolverState",
			Handler:       _ResolverStateService_FullResolverState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "confidence/flags/admin/v1/resolver.proto",
}
