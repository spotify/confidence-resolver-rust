// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: confidence/flags/resolver/v1/internal_api.proto

package resolverinternal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalFlagLoggerService_WriteFlagAssigned_FullMethodName = "/confidence.flags.resolver.v1.InternalFlagLoggerService/WriteFlagAssigned"
	InternalFlagLoggerService_WriteFlagLogs_FullMethodName     = "/confidence.flags.resolver.v1.InternalFlagLoggerService/WriteFlagLogs"
)

// InternalFlagLoggerServiceClient is the client API for InternalFlagLoggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalFlagLoggerServiceClient interface {
	// Writes flag assignment events. Mostly called from the sidecar resolver.
	// (-- api-linter: core::0136::http-uri-suffix=disabled
	//
	//	aip.dev/not-precedent: Disabled because the additional binding. --)
	WriteFlagAssigned(ctx context.Context, in *WriteFlagAssignedRequest, opts ...grpc.CallOption) (*WriteFlagAssignedResponse, error)
	// Writes flag assignment events and resolve logs together.
	// (-- api-linter: core::0136::http-uri-suffix=disabled
	//
	//	aip.dev/not-precedent: Disabled because the additional binding. --)
	WriteFlagLogs(ctx context.Context, in *WriteFlagLogsRequest, opts ...grpc.CallOption) (*WriteFlagLogsResponse, error)
}

type internalFlagLoggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalFlagLoggerServiceClient(cc grpc.ClientConnInterface) InternalFlagLoggerServiceClient {
	return &internalFlagLoggerServiceClient{cc}
}

func (c *internalFlagLoggerServiceClient) WriteFlagAssigned(ctx context.Context, in *WriteFlagAssignedRequest, opts ...grpc.CallOption) (*WriteFlagAssignedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFlagAssignedResponse)
	err := c.cc.Invoke(ctx, InternalFlagLoggerService_WriteFlagAssigned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalFlagLoggerServiceClient) WriteFlagLogs(ctx context.Context, in *WriteFlagLogsRequest, opts ...grpc.CallOption) (*WriteFlagLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFlagLogsResponse)
	err := c.cc.Invoke(ctx, InternalFlagLoggerService_WriteFlagLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalFlagLoggerServiceServer is the server API for InternalFlagLoggerService service.
// All implementations must embed UnimplementedInternalFlagLoggerServiceServer
// for forward compatibility.
type InternalFlagLoggerServiceServer interface {
	// Writes flag assignment events. Mostly called from the sidecar resolver.
	// (-- api-linter: core::0136::http-uri-suffix=disabled
	//
	//	aip.dev/not-precedent: Disabled because the additional binding. --)
	WriteFlagAssigned(context.Context, *WriteFlagAssignedRequest) (*WriteFlagAssignedResponse, error)
	// Writes flag assignment events and resolve logs together.
	// (-- api-linter: core::0136::http-uri-suffix=disabled
	//
	//	aip.dev/not-precedent: Disabled because the additional binding. --)
	WriteFlagLogs(context.Context, *WriteFlagLogsRequest) (*WriteFlagLogsResponse, error)
	mustEmbedUnimplementedInternalFlagLoggerServiceServer()
}

// UnimplementedInternalFlagLoggerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalFlagLoggerServiceServer struct{}

func (UnimplementedInternalFlagLoggerServiceServer) WriteFlagAssigned(context.Context, *WriteFlagAssignedRequest) (*WriteFlagAssignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFlagAssigned not implemented")
}
func (UnimplementedInternalFlagLoggerServiceServer) WriteFlagLogs(context.Context, *WriteFlagLogsRequest) (*WriteFlagLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFlagLogs not implemented")
}
func (UnimplementedInternalFlagLoggerServiceServer) mustEmbedUnimplementedInternalFlagLoggerServiceServer() {
}
func (UnimplementedInternalFlagLoggerServiceServer) testEmbeddedByValue() {}

// UnsafeInternalFlagLoggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalFlagLoggerServiceServer will
// result in compilation errors.
type UnsafeInternalFlagLoggerServiceServer interface {
	mustEmbedUnimplementedInternalFlagLoggerServiceServer()
}

func RegisterInternalFlagLoggerServiceServer(s grpc.ServiceRegistrar, srv InternalFlagLoggerServiceServer) {
	// If the following call pancis, it indicates UnimplementedInternalFlagLoggerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalFlagLoggerService_ServiceDesc, srv)
}

func _InternalFlagLoggerService_WriteFlagAssigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFlagAssignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalFlagLoggerServiceServer).WriteFlagAssigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalFlagLoggerService_WriteFlagAssigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalFlagLoggerServiceServer).WriteFlagAssigned(ctx, req.(*WriteFlagAssignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalFlagLoggerService_WriteFlagLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFlagLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalFlagLoggerServiceServer).WriteFlagLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalFlagLoggerService_WriteFlagLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalFlagLoggerServiceServer).WriteFlagLogs(ctx, req.(*WriteFlagLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalFlagLoggerService_ServiceDesc is the grpc.ServiceDesc for InternalFlagLoggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalFlagLoggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "confidence.flags.resolver.v1.InternalFlagLoggerService",
	HandlerType: (*InternalFlagLoggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteFlagAssigned",
			Handler:    _InternalFlagLoggerService_WriteFlagAssigned_Handler,
		},
		{
			MethodName: "WriteFlagLogs",
			Handler:    _InternalFlagLoggerService_WriteFlagLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "confidence/flags/resolver/v1/internal_api.proto",
}
