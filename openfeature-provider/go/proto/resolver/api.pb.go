// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.3
// source: confidence/flags/resolver/v1/api.proto

package resolver

import (
	_ "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/api"
	_ "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/flags/resolverevents"
	resolvertypes "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/flags/resolvertypes"
	v1 "github.com/spotify/confidence-resolver-rust/openfeature-provider/go/confidence/proto/confidence/flags/types/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolveFlagsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If non-empty, the specific flags are resolved, otherwise all flags
	// available to the client will be resolved.
	Flags []string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
	// An object that contains data used in the flag resolve. For example,
	// the targeting key e.g. the id of the randomization unit, other attributes
	// like country or version that are used for targeting.
	EvaluationContext *structpb.Struct `protobuf:"bytes,2,opt,name=evaluation_context,json=evaluationContext,proto3" json:"evaluation_context,omitempty"`
	// Credentials for the client. It is used to identify the client and find
	// the flags that are available to it.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Determines whether the flags should be applied directly as part of the
	// resolve, or delayed until `ApplyFlag` is called. A flag is typically
	// applied when it is used, if this occurs much later than the resolve, then
	// `apply` should likely be set to false.
	Apply bool `protobuf:"varint,4,opt,name=apply,proto3" json:"apply,omitempty"`
	// Information about the SDK used to initiate the request.
	Sdk           *resolvertypes.Sdk `protobuf:"bytes,5,opt,name=sdk,proto3" json:"sdk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveFlagsRequest) Reset() {
	*x = ResolveFlagsRequest{}
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFlagsRequest) ProtoMessage() {}

func (x *ResolveFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFlagsRequest.ProtoReflect.Descriptor instead.
func (*ResolveFlagsRequest) Descriptor() ([]byte, []int) {
	return file_confidence_flags_resolver_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *ResolveFlagsRequest) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ResolveFlagsRequest) GetEvaluationContext() *structpb.Struct {
	if x != nil {
		return x.EvaluationContext
	}
	return nil
}

func (x *ResolveFlagsRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ResolveFlagsRequest) GetApply() bool {
	if x != nil {
		return x.Apply
	}
	return false
}

func (x *ResolveFlagsRequest) GetSdk() *resolvertypes.Sdk {
	if x != nil {
		return x.Sdk
	}
	return nil
}

type ResolveFlagsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of all flags that could be resolved. Note: if any flag was
	// archived it will not be included in this list.
	ResolvedFlags []*ResolvedFlag `protobuf:"bytes,1,rep,name=resolved_flags,json=resolvedFlags,proto3" json:"resolved_flags,omitempty"`
	// An opaque token that is used when `apply` is set to false in `ResolveFlags`.
	// When `apply` is set to false, the token must be passed to `ApplyFlags`.
	ResolveToken []byte `protobuf:"bytes,2,opt,name=resolve_token,json=resolveToken,proto3" json:"resolve_token,omitempty"`
	// Unique identifier for this particular resolve request.
	ResolveId     string `protobuf:"bytes,3,opt,name=resolve_id,json=resolveId,proto3" json:"resolve_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveFlagsResponse) Reset() {
	*x = ResolveFlagsResponse{}
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFlagsResponse) ProtoMessage() {}

func (x *ResolveFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFlagsResponse.ProtoReflect.Descriptor instead.
func (*ResolveFlagsResponse) Descriptor() ([]byte, []int) {
	return file_confidence_flags_resolver_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveFlagsResponse) GetResolvedFlags() []*ResolvedFlag {
	if x != nil {
		return x.ResolvedFlags
	}
	return nil
}

func (x *ResolveFlagsResponse) GetResolveToken() []byte {
	if x != nil {
		return x.ResolveToken
	}
	return nil
}

func (x *ResolveFlagsResponse) GetResolveId() string {
	if x != nil {
		return x.ResolveId
	}
	return ""
}

type ApplyFlagsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The flags to apply and information about when they were applied.
	Flags []*AppliedFlag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
	// Credentials for the client.
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// An opaque token that was returned from `ResolveFlags`; it must be set.
	ResolveToken []byte `protobuf:"bytes,3,opt,name=resolve_token,json=resolveToken,proto3" json:"resolve_token,omitempty"`
	// The client time when the this request was sent, used for correcting
	// clock skew from the client.
	SendTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	// Information about the SDK used to initiate the request.
	Sdk           *resolvertypes.Sdk `protobuf:"bytes,5,opt,name=sdk,proto3" json:"sdk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyFlagsRequest) Reset() {
	*x = ApplyFlagsRequest{}
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFlagsRequest) ProtoMessage() {}

func (x *ApplyFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFlagsRequest.ProtoReflect.Descriptor instead.
func (*ApplyFlagsRequest) Descriptor() ([]byte, []int) {
	return file_confidence_flags_resolver_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *ApplyFlagsRequest) GetFlags() []*AppliedFlag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ApplyFlagsRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ApplyFlagsRequest) GetResolveToken() []byte {
	if x != nil {
		return x.ResolveToken
	}
	return nil
}

func (x *ApplyFlagsRequest) GetSendTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SendTime
	}
	return nil
}

func (x *ApplyFlagsRequest) GetSdk() *resolvertypes.Sdk {
	if x != nil {
		return x.Sdk
	}
	return nil
}

type ApplyFlagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyFlagsResponse) Reset() {
	*x = ApplyFlagsResponse{}
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFlagsResponse) ProtoMessage() {}

func (x *ApplyFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFlagsResponse.ProtoReflect.Descriptor instead.
func (*ApplyFlagsResponse) Descriptor() ([]byte, []int) {
	return file_confidence_flags_resolver_v1_api_proto_rawDescGZIP(), []int{3}
}

type AppliedFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the flag that should be applied, has the format `flags/*`.
	Flag string `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag,omitempty"`
	// The client time when the flag was applied.
	ApplyTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=apply_time,json=applyTime,proto3" json:"apply_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppliedFlag) Reset() {
	*x = AppliedFlag{}
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppliedFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppliedFlag) ProtoMessage() {}

func (x *AppliedFlag) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppliedFlag.ProtoReflect.Descriptor instead.
func (*AppliedFlag) Descriptor() ([]byte, []int) {
	return file_confidence_flags_resolver_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *AppliedFlag) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *AppliedFlag) GetApplyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyTime
	}
	return nil
}

type ResolvedFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the flag that as resolved.
	Flag string `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag,omitempty"`
	// The id of the resolved variant has the format `flags/abc/variants/xyz`.
	Variant string `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// The value corresponding to the variant. It will always be a json object,
	// for example `{ "color": "red", "size": 12 }`.
	Value *structpb.Struct `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The schema of the value that was returned. For example:
	// ```
	//
	//	{
	//	   "schema": {
	//	     "color": { "stringSchema": {} },
	//	     "size": { "intSchema": {} }
	//	   }
	//	}
	//
	// ```
	FlagSchema *v1.FlagSchema_StructFlagSchema `protobuf:"bytes,4,opt,name=flag_schema,json=flagSchema,proto3" json:"flag_schema,omitempty"`
	// The reason to why the flag could be resolved or not.
	Reason resolvertypes.ResolveReason `protobuf:"varint,5,opt,name=reason,proto3,enum=confidence.flags.resolver.v1.ResolveReason" json:"reason,omitempty"`
	// Determines whether the flag should be applied in the clients
	ShouldApply   bool `protobuf:"varint,6,opt,name=should_apply,json=shouldApply,proto3" json:"should_apply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolvedFlag) Reset() {
	*x = ResolvedFlag{}
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolvedFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedFlag) ProtoMessage() {}

func (x *ResolvedFlag) ProtoReflect() protoreflect.Message {
	mi := &file_confidence_flags_resolver_v1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedFlag.ProtoReflect.Descriptor instead.
func (*ResolvedFlag) Descriptor() ([]byte, []int) {
	return file_confidence_flags_resolver_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *ResolvedFlag) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *ResolvedFlag) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolvedFlag) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ResolvedFlag) GetFlagSchema() *v1.FlagSchema_StructFlagSchema {
	if x != nil {
		return x.FlagSchema
	}
	return nil
}

func (x *ResolvedFlag) GetReason() resolvertypes.ResolveReason {
	if x != nil {
		return x.Reason
	}
	return resolvertypes.ResolveReason(0)
}

func (x *ResolvedFlag) GetShouldApply() bool {
	if x != nil {
		return x.ShouldApply
	}
	return false
}

var File_confidence_flags_resolver_v1_api_proto protoreflect.FileDescriptor

const file_confidence_flags_resolver_v1_api_proto_rawDesc = "" +
	"\n" +
	"&confidence/flags/resolver/v1/api.proto\x12\x1cconfidence.flags.resolver.v1\x1a\x19google/api/resource.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a confidence/api/annotations.proto\x1a%confidence/flags/types/v1/types.proto\x1a(confidence/flags/resolver/v1/types.proto\x1a0confidence/flags/resolver/v1/events/events.proto\"\x9f\x02\n" +
	"\x13ResolveFlagsRequest\x128\n" +
	"\x05flags\x18\x01 \x03(\tB\"\xe2A\x01\x01\xfaA\x1b\n" +
	"\x19flags.confidence.dev/FlagR\x05flags\x12L\n" +
	"\x12evaluation_context\x18\x02 \x01(\v2\x17.google.protobuf.StructB\x04\xe2A\x01\x01R\x11evaluationContext\x12)\n" +
	"\rclient_secret\x18\x03 \x01(\tB\x04\xe2A\x01\x02R\fclientSecret\x12\x1a\n" +
	"\x05apply\x18\x04 \x01(\bB\x04\xe2A\x01\x02R\x05apply\x129\n" +
	"\x03sdk\x18\x05 \x01(\v2!.confidence.flags.resolver.v1.SdkB\x04\xe2A\x01\x01R\x03sdk\"\xad\x01\n" +
	"\x14ResolveFlagsResponse\x12Q\n" +
	"\x0eresolved_flags\x18\x01 \x03(\v2*.confidence.flags.resolver.v1.ResolvedFlagR\rresolvedFlags\x12#\n" +
	"\rresolve_token\x18\x02 \x01(\fR\fresolveToken\x12\x1d\n" +
	"\n" +
	"resolve_id\x18\x03 \x01(\tR\tresolveId\"\xaa\x02\n" +
	"\x11ApplyFlagsRequest\x12E\n" +
	"\x05flags\x18\x01 \x03(\v2).confidence.flags.resolver.v1.AppliedFlagB\x04\xe2A\x01\x02R\x05flags\x12)\n" +
	"\rclient_secret\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\fclientSecret\x12)\n" +
	"\rresolve_token\x18\x03 \x01(\fB\x04\xe2A\x01\x02R\fresolveToken\x12=\n" +
	"\tsend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\bsendTime\x129\n" +
	"\x03sdk\x18\x05 \x01(\v2!.confidence.flags.resolver.v1.SdkB\x04\xe2A\x01\x01R\x03sdk\"\x14\n" +
	"\x12ApplyFlagsResponse\"\x86\x01\n" +
	"\vAppliedFlag\x126\n" +
	"\x04flag\x18\x01 \x01(\tB\"\xe2A\x01\x02\xfaA\x1b\n" +
	"\x19flags.confidence.dev/FlagR\x04flag\x12?\n" +
	"\n" +
	"apply_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\tapplyTime\"\xf5\x02\n" +
	"\fResolvedFlag\x122\n" +
	"\x04flag\x18\x01 \x01(\tB\x1e\xfaA\x1b\n" +
	"\x19flags.confidence.dev/FlagR\x04flag\x12;\n" +
	"\avariant\x18\x02 \x01(\tB!\xfaA\x1e\n" +
	"\x1cflags.confidence.dev/VariantR\avariant\x12-\n" +
	"\x05value\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x05value\x12W\n" +
	"\vflag_schema\x18\x04 \x01(\v26.confidence.flags.types.v1.FlagSchema.StructFlagSchemaR\n" +
	"flagSchema\x12C\n" +
	"\x06reason\x18\x05 \x01(\x0e2+.confidence.flags.resolver.v1.ResolveReasonR\x06reason\x12'\n" +
	"\fshould_apply\x18\x06 \x01(\bB\x04\xe2A\x01\x03R\vshouldApply2\xc6\x03\n" +
	"\x13FlagResolverService\x12\xb3\x01\n" +
	"\fResolveFlags\x121.confidence.flags.resolver.v1.ResolveFlagsRequest\x1a2.confidence.flags.resolver.v1.ResolveFlagsResponse\"<҇\xe4\x10\x1b\n" +
	"\x19flags.confidence.dev/Flag\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/v1/flags:resolve\x12\xab\x01\n" +
	"\n" +
	"ApplyFlags\x12/.confidence.flags.resolver.v1.ApplyFlagsRequest\x1a0.confidence.flags.resolver.v1.ApplyFlagsResponse\":҇\xe4\x10\x1b\n" +
	"\x19flags.confidence.dev/Flag\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/v1/flags:apply\x1aK\xe2\x87\xe4\x10\x1aresolver.eu.confidence.dev\xe2\x87\xe4\x10\x1aresolver.us.confidence.dev\xea\x87\xe4\x10\bResolverB6\n" +
	"(com.spotify.confidence.flags.resolver.v1B\bApiProtoP\x01b\x06proto3"

var (
	file_confidence_flags_resolver_v1_api_proto_rawDescOnce sync.Once
	file_confidence_flags_resolver_v1_api_proto_rawDescData []byte
)

func file_confidence_flags_resolver_v1_api_proto_rawDescGZIP() []byte {
	file_confidence_flags_resolver_v1_api_proto_rawDescOnce.Do(func() {
		file_confidence_flags_resolver_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_confidence_flags_resolver_v1_api_proto_rawDesc), len(file_confidence_flags_resolver_v1_api_proto_rawDesc)))
	})
	return file_confidence_flags_resolver_v1_api_proto_rawDescData
}

var file_confidence_flags_resolver_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_confidence_flags_resolver_v1_api_proto_goTypes = []any{
	(*ResolveFlagsRequest)(nil),            // 0: confidence.flags.resolver.v1.ResolveFlagsRequest
	(*ResolveFlagsResponse)(nil),           // 1: confidence.flags.resolver.v1.ResolveFlagsResponse
	(*ApplyFlagsRequest)(nil),              // 2: confidence.flags.resolver.v1.ApplyFlagsRequest
	(*ApplyFlagsResponse)(nil),             // 3: confidence.flags.resolver.v1.ApplyFlagsResponse
	(*AppliedFlag)(nil),                    // 4: confidence.flags.resolver.v1.AppliedFlag
	(*ResolvedFlag)(nil),                   // 5: confidence.flags.resolver.v1.ResolvedFlag
	(*structpb.Struct)(nil),                // 6: google.protobuf.Struct
	(*resolvertypes.Sdk)(nil),              // 7: confidence.flags.resolver.v1.Sdk
	(*timestamppb.Timestamp)(nil),          // 8: google.protobuf.Timestamp
	(*v1.FlagSchema_StructFlagSchema)(nil), // 9: confidence.flags.types.v1.FlagSchema.StructFlagSchema
	(resolvertypes.ResolveReason)(0),       // 10: confidence.flags.resolver.v1.ResolveReason
}
var file_confidence_flags_resolver_v1_api_proto_depIdxs = []int32{
	6,  // 0: confidence.flags.resolver.v1.ResolveFlagsRequest.evaluation_context:type_name -> google.protobuf.Struct
	7,  // 1: confidence.flags.resolver.v1.ResolveFlagsRequest.sdk:type_name -> confidence.flags.resolver.v1.Sdk
	5,  // 2: confidence.flags.resolver.v1.ResolveFlagsResponse.resolved_flags:type_name -> confidence.flags.resolver.v1.ResolvedFlag
	4,  // 3: confidence.flags.resolver.v1.ApplyFlagsRequest.flags:type_name -> confidence.flags.resolver.v1.AppliedFlag
	8,  // 4: confidence.flags.resolver.v1.ApplyFlagsRequest.send_time:type_name -> google.protobuf.Timestamp
	7,  // 5: confidence.flags.resolver.v1.ApplyFlagsRequest.sdk:type_name -> confidence.flags.resolver.v1.Sdk
	8,  // 6: confidence.flags.resolver.v1.AppliedFlag.apply_time:type_name -> google.protobuf.Timestamp
	6,  // 7: confidence.flags.resolver.v1.ResolvedFlag.value:type_name -> google.protobuf.Struct
	9,  // 8: confidence.flags.resolver.v1.ResolvedFlag.flag_schema:type_name -> confidence.flags.types.v1.FlagSchema.StructFlagSchema
	10, // 9: confidence.flags.resolver.v1.ResolvedFlag.reason:type_name -> confidence.flags.resolver.v1.ResolveReason
	0,  // 10: confidence.flags.resolver.v1.FlagResolverService.ResolveFlags:input_type -> confidence.flags.resolver.v1.ResolveFlagsRequest
	2,  // 11: confidence.flags.resolver.v1.FlagResolverService.ApplyFlags:input_type -> confidence.flags.resolver.v1.ApplyFlagsRequest
	1,  // 12: confidence.flags.resolver.v1.FlagResolverService.ResolveFlags:output_type -> confidence.flags.resolver.v1.ResolveFlagsResponse
	3,  // 13: confidence.flags.resolver.v1.FlagResolverService.ApplyFlags:output_type -> confidence.flags.resolver.v1.ApplyFlagsResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_confidence_flags_resolver_v1_api_proto_init() }
func file_confidence_flags_resolver_v1_api_proto_init() {
	if File_confidence_flags_resolver_v1_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_confidence_flags_resolver_v1_api_proto_rawDesc), len(file_confidence_flags_resolver_v1_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_confidence_flags_resolver_v1_api_proto_goTypes,
		DependencyIndexes: file_confidence_flags_resolver_v1_api_proto_depIdxs,
		MessageInfos:      file_confidence_flags_resolver_v1_api_proto_msgTypes,
	}.Build()
	File_confidence_flags_resolver_v1_api_proto = out.File
	file_confidence_flags_resolver_v1_api_proto_goTypes = nil
	file_confidence_flags_resolver_v1_api_proto_depIdxs = nil
}
